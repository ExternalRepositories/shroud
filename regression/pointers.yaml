copyright:
- Copyright (c) 2017-2020, Lawrence Livermore National Security, LLC and
- other Shroud Project Developers.
- See the top-level COPYRIGHT file for details.
-
- "SPDX-License-Identifier: (BSD-3-Clause)"
-

# Test pointers to POD and use of NumPy/list

library: pointers
cxx_header: pointers.hpp

#language: c

options:
  debug: True
  wrap_python: True
  wrap_lua: False

declarations:

- decl: void  intargs(const int argin      +intent(in),
                            int * arginout +intent(inout),
                            int * argout   +intent(out))

- decl: void cos_doubles(double * in     +intent(in)  +dimension(:),
                         double * out    +intent(out) +allocatable(mold=in),
                         int      sizein +implied(size(in)))
  doxygen:
    brief: compute cos of IN and save in OUT
    description:
      allocate OUT same type as IN
      implied size of array

- decl: void truncate_to_int(double * in     +intent(in)  +dimension(:),
                             int *    out    +intent(out) +allocatable(mold=in),
                             int      sizein +implied(size(in)))
  doxygen:
    brief: truncate IN argument and save in OUT
    description: |
      allocate OUT different type as IN
      implied size of array

- decl: void get_values(int *nvalues+intent(OUT), int *values +intent(out)+dimension(3))
  doxygen:
    brief: fill values into array
    description: |
       The function knows how long the array must be.
       Fortran will treat the dimension as assumed-length.
       The Python wrapper will create a NumPy array or list so it must
       have an explicit dimension (not assumed-length).

- decl: void get_values2(int *arg1 +intent(out)+dimension(3),
                         int *arg2 +intent(out)+dimension(3))
  doxygen:
    brief: fill values into two arrays
    description: |
       Test two intent(out) arguments.
       Make sure error handling works with C++.
 
## test +allocatable(3)
## test +allocatable(nvar)

######################################################################

- decl: void Sum(int len +implied(size(values)),
                 int *values +dimension(:)+intent(in),
                 int *result +intent(out))
  options:
    literalinclude: True
    # unable to deal with dimension
    wrap_lua: False

- decl: void fillIntArray(int *out +intent(out)+dimension(3))
  doxygen:
    description: |
      Return three values into memory the user provides.

- decl: void incrementIntArray(int * array  +dimension(:)+intent(inout),
                               int   sizein +implied(size(array)))
  doxygen:
    description: |
      Increment array in place using intent(INOUT).

  
