{
    "__NOTICE__": "This file is generated by Shroud and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2020, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "tutorial.hpp"
        ],
        "enums": [
            {
                "_fmtmembers": {
                    "BLUE": {
                        "C_enum_member": "TUT_BLUE",
                        "F_enum_member": "blue",
                        "F_value": 1,
                        "enum_member_lower": "blue",
                        "enum_member_name": "BLUE",
                        "enum_member_upper": "BLUE"
                    },
                    "RED": {
                        "C_enum_member": "TUT_RED",
                        "F_enum_member": "red",
                        "F_value": 0,
                        "enum_member_lower": "red",
                        "enum_member_name": "RED",
                        "enum_member_upper": "RED"
                    },
                    "WHITE": {
                        "C_enum_member": "TUT_WHITE",
                        "F_enum_member": "white",
                        "F_value": 2,
                        "enum_member_lower": "white",
                        "enum_member_name": "WHITE",
                        "enum_member_upper": "WHITE"
                    }
                },
                "ast": {
                    "members": [
                        {
                            "name": "RED"
                        },
                        {
                            "name": "BLUE"
                        },
                        {
                            "name": "WHITE"
                        }
                    ],
                    "name": "Color"
                },
                "decl": "enum Color {\n  RED,\n  BLUE,\n  WHITE\n};\n",
                "fmtdict": {
                    "C_enum": "TUT_Color",
                    "enum_lower": "color",
                    "enum_name": "Color",
                    "enum_upper": "COLOR"
                },
                "linenumber": 32,
                "name": "Color",
                "options": {
                    "__line__": 38,
                    "bar": 4
                },
                "typemap_name": "tutorial::Color"
            }
        ],
        "fmtdict": {
            "CXX_local": "SHCXX_",
            "CXX_template": "",
            "CXX_this": "SH_this",
            "CXX_this_call": "",
            "C_array_type": "TUT_SHROUD_array",
            "C_bufferify_suffix": "_bufferify",
            "C_call_list": "",
            "C_capsule_data_type": "TUT_SHROUD_capsule_data",
            "C_custom_return_type": "",
            "C_header_filename": "wrapTutorial.h",
            "C_header_filename_suffix": "h",
            "C_header_utility": "typesTutorial.h",
            "C_impl_filename": "wrapTutorial.cpp",
            "C_impl_filename_suffix": "cpp",
            "C_local": "SHC_",
            "C_memory_dtor_function": "TUT_SHROUD_memory_destructor",
            "C_name_scope": "",
            "C_post_call": "",
            "C_pre_call": "",
            "C_prefix": "TUT_",
            "C_result": "rv",
            "C_string_result_as_arg": "SHF_rv",
            "C_this": "self",
            "F_C_prefix": "c_",
            "F_C_pure_clause": "",
            "F_C_result_clause": "",
            "F_arg_c_call": "",
            "F_array_type": "SHROUD_array",
            "F_capsule_data_type": "SHROUD_capsule_data",
            "F_capsule_final_function": "SHROUD_capsule_final",
            "F_capsule_type": "SHROUD_capsule",
            "F_derived_member": "cxxmem",
            "F_filename_suffix": "f",
            "F_impl_filename": "wrapftutorial.f",
            "F_module_name": "tutorial_mod",
            "F_name_assign": "assign",
            "F_name_associated": "associated",
            "F_name_final": "final",
            "F_name_instance_get": "get_instance",
            "F_name_instance_set": "set_instance",
            "F_name_scope": "",
            "F_pointer": "SHT_ptr",
            "F_pure_clause": "",
            "F_result": "SHT_rv",
            "F_result_capsule": "SHT_crv",
            "F_result_clause": "",
            "F_result_ptr": "SHT_prv",
            "F_string_result_as_arg": "",
            "F_this": "obj",
            "LUA_header_filename": "luaTutorialmodule.hpp",
            "LUA_header_filename_suffix": "hpp",
            "LUA_impl_filename_suffix": "cpp",
            "LUA_metadata": "XXLUA_metadata",
            "LUA_module_filename": "luaTutorialmodule.cpp",
            "LUA_module_name": "tutorial",
            "LUA_module_reg": "l_Tutorial_Reg",
            "LUA_prefix": "l_",
            "LUA_result": "rv",
            "LUA_state_var": "L",
            "LUA_this_call": "",
            "LUA_used_param_state": false,
            "LUA_userdata_type": "XXLUA_userdata_type",
            "PY_PyObject": "PyObject",
            "PY_capsule_destructor_function": "PY_SHROUD_capsule_destructor",
            "PY_dtor_context_array": "PY_SHROUD_capsule_context",
            "PY_dtor_context_typedef": "PY_SHROUD_dtor_context",
            "PY_extern_C_begin": "extern \"C\" ",
            "PY_fetch_context_function": "PY_SHROUD_fetch_context",
            "PY_header_filename": "pyTutorialmodule.hpp",
            "PY_header_filename_suffix": "hpp",
            "PY_impl_filename_suffix": "cpp",
            "PY_module_init": "tutorial",
            "PY_module_name": "tutorial",
            "PY_module_scope": "tutorial",
            "PY_numpy_array_capsule_name": "PY_array_dtor",
            "PY_param_args": "args",
            "PY_param_kwds": "kwds",
            "PY_param_self": "self",
            "PY_prefix": "PY_",
            "PY_release_memory_function": "PY_SHROUD_release_memory",
            "PY_result": "SHTPy_rv",
            "PY_this_call": "",
            "PY_type_dtor": "idtor",
            "PY_type_obj": "obj",
            "PY_used_param_args": false,
            "PY_used_param_kwds": false,
            "PY_used_param_self": false,
            "PY_utility_filename": "pyTutorialutil.cpp",
            "PyObject": "PyObject",
            "YAML_type_filename": "tutorial_types.yaml",
            "c_temp": "SHT_",
            "capsule_order": "0",
            "cast1": ">\t(",
            "cast2": ")",
            "cast_const": "const_cast<",
            "cast_reinterpret": "reinterpret_cast<",
            "cast_static": "static_cast<",
            "class_scope": "",
            "cxx_class": "",
            "f_pointer_shape": "",
            "f_var_shape": "",
            "file_scope": "Tutorial",
            "function_suffix": "",
            "library": "Tutorial",
            "library_lower": "tutorial",
            "library_upper": "TUTORIAL",
            "namespace_scope": "",
            "npy_dims": "NULL",
            "npy_intp": "",
            "npy_ndims": "0",
            "stdlib": "std::",
            "template_suffix": "",
            "void_proto": ""
        },
        "functions": [
            {
                "ast": {
                    "declarator": {
                        "name": "NoReturnNoArguments",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void NoReturnNoArguments()",
                "declgen": "void NoReturnNoArguments()",
                "fmtdict": {
                    "C_name": "TUT_no_return_no_arguments",
                    "C_prototype": "",
                    "C_return_type": "void",
                    "F_C_call": "c_no_return_no_arguments",
                    "F_C_name": "no_return_no_arguments",
                    "F_arguments": "",
                    "F_name_function": "no_return_no_arguments",
                    "F_name_generic": "no_return_no_arguments",
                    "F_name_impl": "no_return_no_arguments",
                    "F_subprogram": "subroutine",
                    "LUA_name": "NoReturnNoArguments",
                    "LUA_name_impl": "l_no_return_no_arguments",
                    "PY_name_impl": "PY_NoReturnNoArguments",
                    "c_const": "",
                    "function_name": "NoReturnNoArguments",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "no_return_no_arguments"
                },
                "linenumber": 45,
                "options": {
                    "__line__": 47,
                    "literalinclude": true
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg1)",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "arg1",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tonumber(L, 1)",
                            "c_var_len": "Larg1",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "lua_var": "SH_Lua_arg1"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "double arg1",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "double arg1",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg2)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg2",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg2",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 2)",
                            "c_var_len": "Larg2",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "lua_var": "SH_Lua_arg2"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arg2",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_decl": "int arg2",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "double",
                        "f_type": "real(C_DOUBLE)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "double",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_DOUBLE",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "PassByValue",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double PassByValue(double arg1, int arg2)",
                "declgen": "double PassByValue(double arg1 +intent(in)+value, int arg2 +intent(in)+value)",
                "fmtdict": {
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "TUT_pass_by_value",
                    "C_prototype": "double arg1,\t int arg2",
                    "C_return_type": "double",
                    "F_C_call": "c_pass_by_value",
                    "F_C_name": "pass_by_value",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_function": "pass_by_value",
                    "F_name_generic": "pass_by_value",
                    "F_name_impl": "pass_by_value",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "PassByValue",
                    "LUA_name_impl": "l_pass_by_value",
                    "PY_name_impl": "PY_PassByValue",
                    "c_const": "",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "PassByValue",
                    "underscore_name": "pass_by_value"
                },
                "linenumber": 50,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tostring(L, 1)",
                            "c_var_len": "Larg1",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "arg1",
                            "lua_var": "SH_Lua_arg1"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_string_in",
                            "stmt1": "py_string_in"
                        }
                    },
                    "arg2": {
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tostring(L, 2)",
                            "c_var_len": "Larg2",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "arg2",
                            "lua_var": "SH_Lua_arg2"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": null,
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt0": "py_string_in",
                            "stmt1": "py_string_in"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_string_scalar_result_allocatable",
                        "stmt1": "f_string_result_allocatable",
                        "stmtc0": "c_string_scalar_result_buf",
                        "stmtc1": "c_string_result_buf"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv.c_str()",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_string_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "allocatable"
                    },
                    "const": true,
                    "declarator": {
                        "name": "ConcatenateStrings",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg2",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string ConcatenateStrings( const std::string& arg1, const std::string& arg2 )",
                "declgen": "const std::string ConcatenateStrings(const std::string & arg1 +intent(in), const std::string & arg2 +intent(in)) +deref(allocatable)",
                "doxygen": {
                    "__line__": 56,
                    "description": "Note that since a reference is returned, no intermediate string\nis allocated.  It is assumed +owner(library).\n"
                },
                "fmtdict": {
                    "F_C_call": "c_concatenate_strings_bufferify",
                    "F_arg_c_call": "arg1,\t len_trim(arg1, kind=C_INT),\t arg2,\t len_trim(arg2, kind=C_INT),\t DSHF_rv",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_function": "concatenate_strings",
                    "F_name_generic": "concatenate_strings",
                    "F_name_impl": "concatenate_strings",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "ConcatenateStrings",
                    "LUA_name_impl": "l_concatenate_strings",
                    "PY_name_impl": "PY_ConcatenateStrings",
                    "function_name": "ConcatenateStrings",
                    "underscore_name": "concatenate_strings"
                },
                "linenumber": 53,
                "options": {
                    "wrap_c": false
                }
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_context": "DSHF_rv",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(SHCXX_rv))",
                            "cxx_member": "->",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_scalar_result_buf_allocatable",
                            "stmt1": "c_string_scalar_result_buf_allocatable"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "c_var_context": "DSHF_rv",
                            "f_type": "character(*)",
                            "f_var": "SHT_rv",
                            "stmt0": "f_string_pointer_result_allocatable",
                            "stmt1": "f_string_result_allocatable",
                            "stmtc0": "c_string_pointer_result_buf_allocatable",
                            "stmtc1": "c_string_result_buf_allocatable"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "c_var_trim": "Larg1",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(&SHCXX_arg1))",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_pointer_in_buf",
                            "stmt1": "c_string_in_buf"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_type": "character(*)",
                            "f_var": "arg1",
                            "stmt0": "f_string_pointer_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_pointer_in_buf",
                            "stmtc1": "c_string_in_buf"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg2",
                            "c_var_trim": "Larg2",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(&SHCXX_arg2))",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_pointer_in_buf",
                            "stmt1": "c_string_in_buf"
                        },
                        "fmtf": {
                            "c_var": "arg2",
                            "f_type": "character(*)",
                            "f_var": "arg2",
                            "stmt0": "f_string_pointer_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_pointer_in_buf",
                            "stmtc1": "c_string_in_buf"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "ConcatenateStrings",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "len_trim": "Larg1",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "len_trim": "Larg2",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg2",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "_is_result": true,
                                "context": "DSHF_rv",
                                "deref": "allocatable",
                                "intent": "out"
                            },
                            "const": true,
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const std::string ConcatenateStrings( const std::string& arg1, const std::string& arg2 )",
                "declgen": "void ConcatenateStrings(const std::string & arg1 +intent(in)+len_trim(Larg1), const std::string & arg2 +intent(in)+len_trim(Larg2), const std::string * SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out))",
                "doxygen": {
                    "__line__": 56,
                    "description": "Note that since a reference is returned, no intermediate string\nis allocated.  It is assumed +owner(library).\n"
                },
                "fmtdict": {
                    "C_call_list": "SHCXX_arg1,\t SHCXX_arg2",
                    "C_name": "TUT_concatenate_strings_bufferify",
                    "C_prototype": "const char * arg1,\t int Larg1,\t const char * arg2,\t int Larg2,\t TUT_SHROUD_array *DSHF_rv",
                    "C_return_type": "void",
                    "F_C_name": "c_concatenate_strings_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "*SHCXX_rv",
                    "function_name": "ConcatenateStrings",
                    "function_suffix": "_bufferify",
                    "underscore_name": "concatenate_strings"
                },
                "linenumber": 53,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "double",
                        "f_type": "real(C_DOUBLE)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "has_default_arg",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultArguments",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double UseDefaultArguments(double arg1 = 3.1415, bool arg2 = true)",
                "declgen": "double UseDefaultArguments()",
                "default_arg_suffix": [
                    "",
                    "_arg1",
                    "_arg1_arg2"
                ],
                "fmtdict": {
                    "C_name": "TUT_use_default_arguments",
                    "C_prototype": "",
                    "C_return_type": "double",
                    "F_C_call": "c_use_default_arguments",
                    "F_C_name": "c_use_default_arguments",
                    "F_arguments": "",
                    "F_name_function": "use_default_arguments",
                    "F_name_generic": "use_default_arguments",
                    "F_name_impl": "use_default_arguments",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "UseDefaultArguments",
                    "function_suffix": "",
                    "underscore_name": "use_default_arguments"
                },
                "linenumber": 61,
                "options": {
                    "__line__": 66,
                    "literalinclude": true,
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg1)",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "arg1",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "double",
                        "f_type": "real(C_DOUBLE)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "has_default_arg",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultArguments",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "init": 3.1415,
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double UseDefaultArguments(double arg1 = 3.1415, bool arg2 = true)",
                "declgen": "double UseDefaultArguments(double arg1=3.1415 +intent(in)+value)",
                "default_arg_suffix": [
                    "",
                    "_arg1",
                    "_arg1_arg2"
                ],
                "fmtdict": {
                    "C_call_list": "arg1",
                    "C_name": "TUT_use_default_arguments_arg1",
                    "C_prototype": "double arg1",
                    "C_return_type": "double",
                    "F_C_call": "c_use_default_arguments_arg1",
                    "F_C_name": "c_use_default_arguments_arg1",
                    "F_arg_c_call": "arg1",
                    "F_arguments": "arg1",
                    "F_name_function": "use_default_arguments_arg1",
                    "F_name_generic": "use_default_arguments",
                    "F_name_impl": "use_default_arguments_arg1",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "UseDefaultArguments",
                    "function_suffix": "_arg1",
                    "underscore_name": "use_default_arguments"
                },
                "linenumber": 61,
                "options": {
                    "__line__": 66,
                    "literalinclude": true,
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_default_funcs": [
                    18,
                    19
                ],
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg1)",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "arg1",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tonumber(L, 1)",
                            "c_var_len": "Larg1",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "lua_var": "SH_Lua_arg1"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "double arg1",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "double arg1",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg2)",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt0": "c_bool_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "SH_arg2",
                            "f_type": "logical",
                            "f_var": "arg2",
                            "stmt0": "f_bool_scalar_in_",
                            "stmt1": "f_bool_in",
                            "stmtc0": "c_bool_scalar_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_toboolean(L, 2)",
                            "c_var_len": "Larg2",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "arg2",
                            "lua_var": "SH_Lua_arg2"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "c_const": "",
                            "c_decl": "bool arg2",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_decl": "bool arg2",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_BOOL",
                            "py_type": "PyObject",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt0": "py_bool_in",
                            "stmt1": "py_bool_in"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "double",
                        "f_type": "real(C_DOUBLE)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "double",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_DOUBLE",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_result",
                        "stmt1": "py_default"
                    }
                },
                "_has_default_arg": true,
                "_nargs": [
                    0,
                    2
                ],
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultArguments",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "init": 3.1415,
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "init": "true",
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        }
                    ],
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double UseDefaultArguments(double arg1 = 3.1415, bool arg2 = true)",
                "declgen": "double UseDefaultArguments(double arg1=3.1415 +intent(in)+value, bool arg2=true +intent(in)+value)",
                "default_arg_suffix": [
                    "",
                    "_arg1",
                    "_arg1_arg2"
                ],
                "fmtdict": {
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "TUT_use_default_arguments_arg1_arg2",
                    "C_prototype": "double arg1,\t bool arg2",
                    "C_return_type": "double",
                    "F_C_call": "c_use_default_arguments_arg1_arg2",
                    "F_C_name": "c_use_default_arguments_arg1_arg2",
                    "F_arg_c_call": "arg1,\t SH_arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_function": "use_default_arguments_arg1_arg2",
                    "F_name_generic": "use_default_arguments",
                    "F_name_impl": "use_default_arguments_arg1_arg2",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "UseDefaultArguments",
                    "LUA_name_impl": "l_use_default_arguments",
                    "PY_name_impl": "PY_UseDefaultArguments_arg1_arg2",
                    "c_const": "",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "UseDefaultArguments",
                    "function_suffix": "_arg1_arg2",
                    "underscore_name": "use_default_arguments"
                },
                "linenumber": 61,
                "options": {
                    "__line__": 66,
                    "literalinclude": true
                }
            },
            {
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(&SHCXX_name))",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_pointer_in_",
                            "stmt1": "c_string_in"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tostring(L, 1)",
                            "c_var_len": "Lname",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "name",
                            "lua_var": "SH_Lua_name"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "name",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_name",
                            "data_var": "SHData_name",
                            "numpy_type": null,
                            "py_var": "SHPy_name",
                            "size_var": "SHSize_name",
                            "stmt0": "py_string_in",
                            "stmt1": "py_string_in"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "OverloadedFunction",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void OverloadedFunction(const std::string& name)",
                "declgen": "void OverloadedFunction(const std::string & name +intent(in))",
                "fmtdict": {
                    "C_call_list": "SHCXX_name",
                    "C_name": "TUT_overloaded_function_from_name",
                    "C_prototype": "const char * name",
                    "C_return_type": "void",
                    "F_C_call": "c_overloaded_function_from_name_bufferify",
                    "F_C_name": "c_overloaded_function_from_name",
                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT)",
                    "F_arguments": "name",
                    "F_name_function": "overloaded_function_from_name",
                    "F_name_generic": "overloaded_function",
                    "F_name_impl": "overloaded_function_from_name",
                    "F_subprogram": "subroutine",
                    "LUA_name": "OverloadedFunction",
                    "LUA_name_impl": "l_overloaded_function",
                    "PY_name_impl": "PY_OverloadedFunction_from_name",
                    "__line__": 71,
                    "c_const": "",
                    "function_name": "OverloadedFunction",
                    "function_suffix": "_from_name",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "overloaded_function"
                },
                "linenumber": 70,
                "options": {}
            },
            {
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "c_var_trim": "Lname",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(&SHCXX_name))",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_pointer_in_buf",
                            "stmt1": "c_string_in_buf"
                        },
                        "fmtf": {
                            "c_var": "name",
                            "f_type": "character(*)",
                            "f_var": "name",
                            "stmt0": "f_string_pointer_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_pointer_in_buf",
                            "stmtc1": "c_string_in_buf"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "OverloadedFunction",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "len_trim": "Lname",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void OverloadedFunction(const std::string& name)",
                "declgen": "void OverloadedFunction(const std::string & name +intent(in)+len_trim(Lname))",
                "fmtdict": {
                    "C_call_list": "SHCXX_name",
                    "C_name": "TUT_overloaded_function_from_name_bufferify",
                    "C_prototype": "const char * name,\t int Lname",
                    "C_return_type": "void",
                    "F_C_name": "c_overloaded_function_from_name_bufferify",
                    "__line__": 71,
                    "c_const": "",
                    "function_name": "OverloadedFunction",
                    "function_suffix": "_from_name_bufferify",
                    "underscore_name": "overloaded_function"
                },
                "linenumber": 70,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "indx": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "indx",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&indx)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "indx",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "indx",
                            "f_type": "integer(C_INT)",
                            "f_var": "indx",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 1)",
                            "c_var_len": "Lindx",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "indx",
                            "lua_var": "SH_Lua_indx"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int indx",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "indx",
                            "cxx_addr": "&",
                            "cxx_decl": "int indx",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "indx",
                            "data_var": "SHData_indx",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_indx",
                            "size_var": "SHSize_indx",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "OverloadedFunction",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "indx",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void OverloadedFunction(int indx)",
                "declgen": "void OverloadedFunction(int indx +intent(in)+value)",
                "fmtdict": {
                    "C_call_list": "indx",
                    "C_name": "TUT_overloaded_function_from_index",
                    "C_prototype": "int indx",
                    "C_return_type": "void",
                    "F_C_call": "c_overloaded_function_from_index",
                    "F_C_name": "c_overloaded_function_from_index",
                    "F_arg_c_call": "indx",
                    "F_arguments": "indx",
                    "F_name_function": "overloaded_function_from_index",
                    "F_name_generic": "overloaded_function",
                    "F_name_impl": "overloaded_function_from_index",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_OverloadedFunction_from_index",
                    "__line__": 74,
                    "c_const": "",
                    "function_name": "OverloadedFunction",
                    "function_suffix": "_from_index",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "overloaded_function"
                },
                "linenumber": 73,
                "options": {}
            },
            {
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateArgument",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "ArgType"
                            ],
                            "typemap_name": "ArgType"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "cxx_template": {
                    "ArgType": [
                        "int",
                        "double"
                    ]
                },
                "decl": "template<typename ArgType>\nvoid TemplateArgument(ArgType arg)\n",
                "declgen": "void TemplateArgument(ArgType arg +intent(in)+value)",
                "fmtdict": {
                    "function_name": "TemplateArgument",
                    "underscore_name": "template_argument"
                },
                "have_template_args": true,
                "linenumber": 77,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "ArgType"
                ]
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 1)",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arg",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "int arg",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateArgument",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "template<typename ArgType>\nvoid TemplateArgument(ArgType arg)\n",
                "declgen": "void TemplateArgument(int arg +intent(in)+value)",
                "fmtdict": {
                    "CXX_template": "<int>",
                    "C_call_list": "arg",
                    "C_name": "TUT_template_argument_int",
                    "C_prototype": "int arg",
                    "C_return_type": "void",
                    "F_C_call": "c_template_argument_int",
                    "F_C_name": "c_template_argument_int",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "template_argument_int",
                    "F_name_generic": "template_argument",
                    "F_name_impl": "template_argument_int",
                    "F_subprogram": "subroutine",
                    "LUA_name": "TemplateArgument",
                    "LUA_name_impl": "l_template_argument",
                    "PY_name_impl": "PY_TemplateArgument_int",
                    "c_const": "",
                    "function_name": "TemplateArgument",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "template_suffix": "_int",
                    "underscore_name": "template_argument"
                },
                "have_template_args": true,
                "linenumber": 77,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": true,
                    "wrap_python": true
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "ArgType"
                ]
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg)",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "arg",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tonumber(L, 1)",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "double arg",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "double arg",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateArgument",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "template<typename ArgType>\nvoid TemplateArgument(ArgType arg)\n",
                "declgen": "void TemplateArgument(double arg +intent(in)+value)",
                "fmtdict": {
                    "CXX_template": "<double>",
                    "C_call_list": "arg",
                    "C_name": "TUT_template_argument_double",
                    "C_prototype": "double arg",
                    "C_return_type": "void",
                    "F_C_call": "c_template_argument_double",
                    "F_C_name": "c_template_argument_double",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "template_argument_double",
                    "F_name_generic": "template_argument",
                    "F_name_impl": "template_argument_double",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_TemplateArgument_double",
                    "c_const": "",
                    "function_name": "TemplateArgument",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "template_suffix": "_double",
                    "underscore_name": "template_argument"
                },
                "gen_headers_typedef": [
                    "double",
                    "int"
                ],
                "have_template_args": true,
                "linenumber": 77,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": true,
                    "wrap_python": true
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "ArgType"
                ]
            },
            {
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateReturn",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "RetType"
                    ],
                    "typemap_name": "RetType"
                },
                "cxx_template": {
                    "RetType": [
                        "int",
                        "double"
                    ]
                },
                "decl": "template<typename RetType> RetType TemplateReturn()",
                "declgen": "RetType TemplateReturn()",
                "fmtdict": {
                    "function_name": "TemplateReturn",
                    "underscore_name": "template_return"
                },
                "have_template_args": true,
                "linenumber": 84,
                "options": {
                    "__line__": 88,
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "RetType"
                ]
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateReturn",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "template<typename RetType> RetType TemplateReturn()",
                "declgen": "int TemplateReturn()",
                "fmtdict": {
                    "CXX_template": "<int>",
                    "C_name": "TUT_template_return_int",
                    "C_prototype": "",
                    "C_return_type": "int",
                    "F_C_call": "c_template_return_int",
                    "F_C_name": "c_template_return_int",
                    "F_arguments": "",
                    "F_name_function": "template_return_int",
                    "F_name_generic": "template_return",
                    "F_name_impl": "template_return_int",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "TemplateReturn",
                    "template_suffix": "_int",
                    "underscore_name": "template_return"
                },
                "have_template_args": true,
                "linenumber": 84,
                "options": {
                    "F_create_generic": false,
                    "__line__": 88,
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "RetType"
                ]
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "double",
                        "f_type": "real(C_DOUBLE)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateReturn",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "template<typename RetType> RetType TemplateReturn()",
                "declgen": "double TemplateReturn()",
                "fmtdict": {
                    "CXX_template": "<double>",
                    "C_name": "TUT_template_return_double",
                    "C_prototype": "",
                    "C_return_type": "double",
                    "F_C_call": "c_template_return_double",
                    "F_C_name": "c_template_return_double",
                    "F_arguments": "",
                    "F_name_function": "template_return_double",
                    "F_name_generic": "template_return",
                    "F_name_impl": "template_return_double",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "TemplateReturn",
                    "template_suffix": "_double",
                    "underscore_name": "template_return"
                },
                "gen_headers_typedef": [
                    "double",
                    "int"
                ],
                "have_template_args": true,
                "linenumber": 84,
                "options": {
                    "F_create_generic": false,
                    "__line__": 88,
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "RetType"
                ]
            },
            {
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FortranGenericOverloaded",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void FortranGenericOverloaded()",
                "declgen": "void FortranGenericOverloaded()",
                "fmtdict": {
                    "C_name": "TUT_fortran_generic_overloaded_0",
                    "C_prototype": "",
                    "C_return_type": "void",
                    "F_C_call": "c_fortran_generic_overloaded_0",
                    "F_C_name": "c_fortran_generic_overloaded_0",
                    "F_arguments": "",
                    "F_name_function": "fortran_generic_overloaded_0",
                    "F_name_generic": "fortran_generic_overloaded",
                    "F_name_impl": "fortran_generic_overloaded_0",
                    "F_subprogram": "subroutine",
                    "LUA_name": "FortranGenericOverloaded",
                    "LUA_name_impl": "l_fortran_generic_overloaded",
                    "PY_name_impl": "PY_FortranGenericOverloaded_0",
                    "c_const": "",
                    "function_name": "FortranGenericOverloaded",
                    "function_suffix": "_0",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "fortran_generic_overloaded"
                },
                "linenumber": 110,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg2)",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tonumber(L, 2)",
                            "c_var_len": "Larg2",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "lua_var": "SH_Lua_arg2"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "double arg2",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_decl": "double arg2",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    },
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(&SHCXX_name))",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_pointer_in_",
                            "stmt1": "c_string_in"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tostring(L, 1)",
                            "c_var_len": "Lname",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "name",
                            "lua_var": "SH_Lua_name"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "name",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_name",
                            "data_var": "SHData_name",
                            "numpy_type": null,
                            "py_var": "SHPy_name",
                            "size_var": "SHSize_name",
                            "stmt0": "py_string_in",
                            "stmt1": "py_string_in"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FortranGenericOverloaded",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void FortranGenericOverloaded(const std::string &name, double arg2)",
                "declgen": "void FortranGenericOverloaded(const std::string & name +intent(in), double arg2 +intent(in)+value)",
                "fmtdict": {
                    "C_call_list": "SHCXX_name,\t arg2",
                    "C_name": "TUT_fortran_generic_overloaded_1",
                    "C_prototype": "const char * name,\t double arg2",
                    "C_return_type": "void",
                    "F_C_name": "c_fortran_generic_overloaded_1",
                    "PY_name_impl": "PY_FortranGenericOverloaded_1",
                    "c_const": "",
                    "function_name": "FortranGenericOverloaded",
                    "function_suffix": "_1",
                    "underscore_name": "fortran_generic_overloaded"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": false
                                },
                                "const": true,
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg2",
                                    "pointer": []
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            }
                        ],
                        "function_suffix": "_float",
                        "generic": "(float arg2)"
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": false
                                },
                                "const": true,
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg2",
                                    "pointer": []
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "function_suffix": "_double",
                        "generic": "(double arg2)"
                    }
                ],
                "linenumber": 111,
                "options": {
                    "F_string_len_trim": true,
                    "__line__": 112,
                    "wrap_fortran": false
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FortranGenericOverloaded",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void FortranGenericOverloaded(const std::string &name, double arg2)",
                "declgen": "void FortranGenericOverloaded(const std::string & name +intent(in), float arg2 +intent(in)+value)",
                "fmtdict": {
                    "F_C_call": "c_fortran_generic_overloaded_1_bufferify",
                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT),\t real(arg2, C_DOUBLE)",
                    "F_arguments": "name,\t arg2",
                    "F_name_function": "fortran_generic_overloaded_1_float",
                    "F_name_generic": "fortran_generic_overloaded",
                    "F_name_impl": "fortran_generic_overloaded_1_float",
                    "F_subprogram": "subroutine",
                    "function_name": "FortranGenericOverloaded",
                    "function_suffix": "_1_float",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "fortran_generic_overloaded"
                },
                "linenumber": 111,
                "options": {
                    "F_string_len_trim": true,
                    "__line__": 112,
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FortranGenericOverloaded",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void FortranGenericOverloaded(const std::string &name, double arg2)",
                "declgen": "void FortranGenericOverloaded(const std::string & name +intent(in), double arg2 +intent(in)+value)",
                "fmtdict": {
                    "F_C_call": "c_fortran_generic_overloaded_1_bufferify",
                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT),\t arg2",
                    "F_arguments": "name,\t arg2",
                    "F_name_function": "fortran_generic_overloaded_1_double",
                    "F_name_generic": "fortran_generic_overloaded",
                    "F_name_impl": "fortran_generic_overloaded_1_double",
                    "F_subprogram": "subroutine",
                    "function_name": "FortranGenericOverloaded",
                    "function_suffix": "_1_double",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "fortran_generic_overloaded"
                },
                "linenumber": 111,
                "options": {
                    "F_string_len_trim": true,
                    "__line__": 112,
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg2)",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_native_scalar_in_buf",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg2",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "arg2",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_buf",
                            "stmtc1": "c_default"
                        }
                    },
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "c_var_trim": "Lname",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(&SHCXX_name))",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_pointer_in_buf",
                            "stmt1": "c_string_in_buf"
                        },
                        "fmtf": {
                            "c_var": "name",
                            "f_type": "character(*)",
                            "f_var": "name",
                            "stmt0": "f_string_pointer_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_pointer_in_buf",
                            "stmtc1": "c_string_in_buf"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FortranGenericOverloaded",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "len_trim": "Lname",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void FortranGenericOverloaded(const std::string &name, double arg2)",
                "declgen": "void FortranGenericOverloaded(const std::string & name +intent(in)+len_trim(Lname), double arg2 +intent(in)+value)",
                "fmtdict": {
                    "C_call_list": "SHCXX_name,\t arg2",
                    "C_name": "TUT_fortran_generic_overloaded_1_bufferify",
                    "C_prototype": "const char * name,\t int Lname,\t double arg2",
                    "C_return_type": "void",
                    "F_C_name": "c_fortran_generic_overloaded_1_bufferify",
                    "c_const": "",
                    "function_name": "FortranGenericOverloaded",
                    "function_suffix": "_1_bufferify",
                    "underscore_name": "fortran_generic_overloaded"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": false
                                },
                                "const": true,
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg2",
                                    "pointer": []
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            }
                        ],
                        "function_suffix": "_float",
                        "generic": "(float arg2)"
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": false
                                },
                                "const": true,
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg2",
                                    "pointer": []
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "function_suffix": "_double",
                        "generic": "(double arg2)"
                    }
                ],
                "linenumber": 111,
                "options": {
                    "F_string_len_trim": true,
                    "__line__": 112,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&num)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "num",
                            "f_type": "integer(C_INT)",
                            "f_var": "num",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "has_default_arg",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "num",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(int num +intent(in)+value)",
                "default_arg_suffix": [
                    "_num",
                    "_num_offset",
                    "_num_offset_stride"
                ],
                "fmtdict": {
                    "C_call_list": "num",
                    "C_name": "TUT_use_default_overload_num",
                    "C_prototype": "int num",
                    "C_return_type": "int",
                    "F_C_call": "c_use_default_overload_num",
                    "F_C_name": "c_use_default_overload_num",
                    "F_arg_c_call": "num",
                    "F_arguments": "num",
                    "F_name_function": "use_default_overload_num",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_num",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_num",
                    "underscore_name": "use_default_overload"
                },
                "linenumber": 124,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&num)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "num",
                            "f_type": "integer(C_INT)",
                            "f_var": "num",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        }
                    },
                    "offset": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "offset",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&offset)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "offset",
                            "f_type": "integer(C_INT)",
                            "f_var": "offset",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "has_default_arg",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "num",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "offset",
                                "pointer": []
                            },
                            "init": 0,
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(int num +intent(in)+value, int offset=0 +intent(in)+value)",
                "default_arg_suffix": [
                    "_num",
                    "_num_offset",
                    "_num_offset_stride"
                ],
                "fmtdict": {
                    "C_call_list": "num,\t offset",
                    "C_name": "TUT_use_default_overload_num_offset",
                    "C_prototype": "int num,\t int offset",
                    "C_return_type": "int",
                    "F_C_call": "c_use_default_overload_num_offset",
                    "F_C_name": "c_use_default_overload_num_offset",
                    "F_arg_c_call": "num,\t offset",
                    "F_arguments": "num,\t offset",
                    "F_name_function": "use_default_overload_num_offset",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_num_offset",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_num_offset",
                    "underscore_name": "use_default_overload"
                },
                "linenumber": 124,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_default_funcs": [
                    24,
                    25
                ],
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&num)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "num",
                            "f_type": "integer(C_INT)",
                            "f_var": "num",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 1)",
                            "c_var_len": "Lnum",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "lua_var": "SH_Lua_num"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int num",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_decl": "int num",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "data_var": "SHData_num",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_num",
                            "size_var": "SHSize_num",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    },
                    "offset": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "offset",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&offset)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "offset",
                            "f_type": "integer(C_INT)",
                            "f_var": "offset",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 2)",
                            "c_var_len": "Loffset",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "lua_var": "SH_Lua_offset"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int offset",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "offset",
                            "cxx_addr": "&",
                            "cxx_decl": "int offset",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "data_var": "SHData_offset",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_offset",
                            "size_var": "SHSize_offset",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    },
                    "stride": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "stride",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&stride)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "stride",
                            "f_type": "integer(C_INT)",
                            "f_var": "stride",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 3,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 3)",
                            "c_var_len": "Lstride",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "lua_var": "SH_Lua_stride"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int stride",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "stride",
                            "cxx_addr": "&",
                            "cxx_decl": "int stride",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "data_var": "SHData_stride",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_stride",
                            "size_var": "SHSize_stride",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_result",
                        "stmt1": "py_default"
                    }
                },
                "_has_default_arg": true,
                "_nargs": [
                    1,
                    3
                ],
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "num",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "offset",
                                "pointer": []
                            },
                            "init": 0,
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "stride",
                                "pointer": []
                            },
                            "init": 1,
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)",
                "default_arg_suffix": [
                    "_num",
                    "_num_offset",
                    "_num_offset_stride"
                ],
                "fmtdict": {
                    "C_call_list": "num,\t offset,\t stride",
                    "C_name": "TUT_use_default_overload_num_offset_stride",
                    "C_prototype": "int num,\t int offset,\t int stride",
                    "C_return_type": "int",
                    "F_C_call": "c_use_default_overload_num_offset_stride",
                    "F_C_name": "c_use_default_overload_num_offset_stride",
                    "F_arg_c_call": "num,\t offset,\t stride",
                    "F_arguments": "num,\t offset,\t stride",
                    "F_name_function": "use_default_overload_num_offset_stride",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_num_offset_stride",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "UseDefaultOverload",
                    "LUA_name_impl": "l_use_default_overload",
                    "PY_name_impl": "PY_UseDefaultOverload_num_offset_stride",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_num_offset_stride",
                    "underscore_name": "use_default_overload"
                },
                "linenumber": 124,
                "options": {}
            },
            {
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&num)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "num",
                            "f_type": "integer(C_INT)",
                            "f_var": "num",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "type",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&type)",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "type",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "type",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "has_default_arg",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "num",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(double type, int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(double type +intent(in)+value, int num +intent(in)+value)",
                "fmtdict": {
                    "C_call_list": "type,\t num",
                    "C_name": "TUT_use_default_overload_3",
                    "C_prototype": "double type,\t int num",
                    "C_return_type": "int",
                    "F_C_call": "c_use_default_overload_3",
                    "F_C_name": "c_use_default_overload_3",
                    "F_arg_c_call": "type,\t num",
                    "F_arguments": "type,\t num",
                    "F_name_function": "use_default_overload_3",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_3",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_3",
                    "underscore_name": "use_default_overload"
                },
                "linenumber": 130,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&num)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "num",
                            "f_type": "integer(C_INT)",
                            "f_var": "num",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        }
                    },
                    "offset": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "offset",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&offset)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "offset",
                            "f_type": "integer(C_INT)",
                            "f_var": "offset",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "type",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&type)",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "type",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "type",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "has_default_arg",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "num",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "offset",
                                "pointer": []
                            },
                            "init": 0,
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(double type, int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value)",
                "fmtdict": {
                    "C_call_list": "type,\t num,\t offset",
                    "C_name": "TUT_use_default_overload_4",
                    "C_prototype": "double type,\t int num,\t int offset",
                    "C_return_type": "int",
                    "F_C_call": "c_use_default_overload_4",
                    "F_C_name": "c_use_default_overload_4",
                    "F_arg_c_call": "type,\t num,\t offset",
                    "F_arguments": "type,\t num,\t offset",
                    "F_name_function": "use_default_overload_4",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_4",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_4",
                    "underscore_name": "use_default_overload"
                },
                "linenumber": 130,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_default_funcs": [
                    26,
                    27
                ],
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&num)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "num",
                            "f_type": "integer(C_INT)",
                            "f_var": "num",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 2)",
                            "c_var_len": "Lnum",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "lua_var": "SH_Lua_num"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int num",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_decl": "int num",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "data_var": "SHData_num",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_num",
                            "size_var": "SHSize_num",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    },
                    "offset": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "offset",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&offset)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "offset",
                            "f_type": "integer(C_INT)",
                            "f_var": "offset",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 3,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 3)",
                            "c_var_len": "Loffset",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "lua_var": "SH_Lua_offset"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int offset",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "offset",
                            "cxx_addr": "&",
                            "cxx_decl": "int offset",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "data_var": "SHData_offset",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_offset",
                            "size_var": "SHSize_offset",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    },
                    "stride": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "stride",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&stride)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "stride",
                            "f_type": "integer(C_INT)",
                            "f_var": "stride",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 4,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 4)",
                            "c_var_len": "Lstride",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "lua_var": "SH_Lua_stride"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int stride",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "stride",
                            "cxx_addr": "&",
                            "cxx_decl": "int stride",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "data_var": "SHData_stride",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_stride",
                            "size_var": "SHSize_stride",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "type",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&type)",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "type",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "type",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tonumber(L, 1)",
                            "c_var_len": "Ltype",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "lua_var": "SH_Lua_type"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "double type",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "type",
                            "cxx_addr": "&",
                            "cxx_decl": "double type",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "data_var": "SHData_type",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_type",
                            "size_var": "SHSize_type",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_result",
                        "stmt1": "py_default"
                    }
                },
                "_has_default_arg": true,
                "_nargs": [
                    2,
                    4
                ],
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "num",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "offset",
                                "pointer": []
                            },
                            "init": 0,
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "stride",
                                "pointer": []
                            },
                            "init": 1,
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(double type, int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)",
                "fmtdict": {
                    "C_call_list": "type,\t num,\t offset,\t stride",
                    "C_name": "TUT_use_default_overload_5",
                    "C_prototype": "double type,\t int num,\t int offset,\t int stride",
                    "C_return_type": "int",
                    "F_C_call": "c_use_default_overload_5",
                    "F_C_name": "c_use_default_overload_5",
                    "F_arg_c_call": "type,\t num,\t offset,\t stride",
                    "F_arguments": "type,\t num,\t offset,\t stride",
                    "F_name_function": "use_default_overload_5",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_5",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_UseDefaultOverload_5",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_5",
                    "underscore_name": "use_default_overload"
                },
                "linenumber": 130,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg)",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::TypeID",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 1)",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::TypeID",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arg",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "tutorial::TypeID arg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::TypeID",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "tutorial::TypeID",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "tutorial::TypeID",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "tutorial::TypeID",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "typefunc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "TypeID"
                            ],
                            "typemap_name": "tutorial::TypeID"
                        }
                    ],
                    "specifier": [
                        "TypeID"
                    ],
                    "typemap_name": "tutorial::TypeID"
                },
                "decl": "TypeID typefunc(TypeID arg)",
                "declgen": "TypeID typefunc(TypeID arg +intent(in)+value)",
                "fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "TUT_typefunc",
                    "C_prototype": "int arg",
                    "C_return_type": "int",
                    "F_C_call": "c_typefunc",
                    "F_C_name": "typefunc",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "typefunc",
                    "F_name_generic": "typefunc",
                    "F_name_impl": "typefunc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "typefunc",
                    "LUA_name_impl": "l_typefunc",
                    "PY_name_impl": "PY_typefunc",
                    "c_const": "",
                    "cxx_rv_decl": "tutorial::TypeID SHC_rv",
                    "function_name": "typefunc",
                    "underscore_name": "typefunc"
                },
                "linenumber": 139,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&SHCXX_arg)",
                            "cxx_decl": "tutorial::EnumTypeID SHCXX_arg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::EnumTypeID",
                            "cxx_val": "static_cast<tutorial::EnumTypeID>(arg)",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 1)",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::EnumTypeID",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arg",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "tutorial::EnumTypeID SH_arg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::EnumTypeID",
                            "cxx_val": "static_cast<tutorial::EnumTypeID>(arg)",
                            "cxx_var": "SH_arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_rv_decl": "int SHC_rv",
                        "c_type": "int",
                        "c_val": "static_cast<int>(SHCXX_rv)",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "tutorial::EnumTypeID",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "tutorial::EnumTypeID",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    },
                    "fmtl": {
                        "c_var": "static_cast<int>(SHCXX_rv)",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "tutorial::EnumTypeID",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "enumfunc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "EnumTypeID"
                            ],
                            "typemap_name": "tutorial::EnumTypeID"
                        }
                    ],
                    "specifier": [
                        "EnumTypeID"
                    ],
                    "typemap_name": "tutorial::EnumTypeID"
                },
                "decl": "EnumTypeID enumfunc(EnumTypeID arg)",
                "declgen": "EnumTypeID enumfunc(EnumTypeID arg +intent(in)+value)",
                "fmtdict": {
                    "C_call_list": "SHCXX_arg",
                    "C_name": "TUT_enumfunc",
                    "C_prototype": "int arg",
                    "C_return_type": "int",
                    "F_C_call": "c_enumfunc",
                    "F_C_name": "enumfunc",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "enumfunc",
                    "F_name_generic": "enumfunc",
                    "F_name_impl": "enumfunc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "enumfunc",
                    "LUA_name_impl": "l_enumfunc",
                    "PY_name_impl": "PY_enumfunc",
                    "c_const": "",
                    "cxx_rv_decl": "tutorial::EnumTypeID SHCXX_rv",
                    "function_name": "enumfunc",
                    "underscore_name": "enumfunc"
                },
                "linenumber": 140,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&SHCXX_arg)",
                            "cxx_decl": "tutorial::Color SHCXX_arg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::Color",
                            "cxx_val": "static_cast<tutorial::Color>(arg)",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 1)",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::Color",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arg",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "tutorial::Color SH_arg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::Color",
                            "cxx_val": "static_cast<tutorial::Color>(arg)",
                            "cxx_var": "SH_arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_rv_decl": "int SHC_rv",
                        "c_type": "int",
                        "c_val": "static_cast<int>(SHCXX_rv)",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "tutorial::Color",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "tutorial::Color",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    },
                    "fmtl": {
                        "c_var": "static_cast<int>(SHCXX_rv)",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "tutorial::Color",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "colorfunc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "Color"
                            ],
                            "typemap_name": "tutorial::Color"
                        }
                    ],
                    "specifier": [
                        "Color"
                    ],
                    "typemap_name": "tutorial::Color"
                },
                "decl": "Color colorfunc(Color arg);",
                "declgen": "Color colorfunc(Color arg +intent(in)+value)",
                "fmtdict": {
                    "C_call_list": "SHCXX_arg",
                    "C_name": "TUT_colorfunc",
                    "C_prototype": "int arg",
                    "C_return_type": "int",
                    "F_C_call": "c_colorfunc",
                    "F_C_name": "colorfunc",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "colorfunc",
                    "F_name_generic": "colorfunc",
                    "F_name_impl": "colorfunc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "colorfunc",
                    "LUA_name_impl": "l_colorfunc",
                    "PY_name_impl": "PY_colorfunc",
                    "c_const": "",
                    "cxx_rv_decl": "tutorial::Color SHCXX_rv",
                    "function_name": "colorfunc",
                    "underscore_name": "colorfunc"
                },
                "linenumber": 141,
                "options": {}
            },
            {
                "_fmtargs": {
                    "max": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "max",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&max)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "max",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_pointer_out_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "max",
                            "f_type": "integer(C_INT)",
                            "f_var": "max",
                            "stmt0": "f_native_pointer_out_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_pointer_out_",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int max",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "max",
                            "cxx_addr": "&",
                            "cxx_decl": "int max",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "max",
                            "data_var": "SHData_max",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_max",
                            "size_var": "SHSize_max",
                            "stmt0": "py_native_out",
                            "stmt1": "py_default"
                        }
                    },
                    "min": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "min",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&min)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "min",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_pointer_out_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "min",
                            "f_type": "integer(C_INT)",
                            "f_var": "min",
                            "stmt0": "f_native_pointer_out_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_pointer_out_",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int min",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "min",
                            "cxx_addr": "&",
                            "cxx_decl": "int min",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "min",
                            "data_var": "SHData_min",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_min",
                            "size_var": "SHSize_min",
                            "stmt0": "py_native_out",
                            "stmt1": "py_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "getMinMax",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "min",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "max",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getMinMax(int &min +intent(out), int &max +intent(out))",
                "declgen": "void getMinMax(int & min +intent(out), int & max +intent(out))",
                "doxygen": {
                    "__line__": 144,
                    "brief": "Pass in reference to scalar"
                },
                "fmtdict": {
                    "C_call_list": "*min,\t *max",
                    "C_name": "TUT_get_min_max",
                    "C_prototype": "int * min,\t int * max",
                    "C_return_type": "void",
                    "F_C_call": "c_get_min_max",
                    "F_C_name": "get_min_max",
                    "F_arg_c_call": "min,\t max",
                    "F_arguments": "min,\t max",
                    "F_name_function": "get_min_max",
                    "F_name_generic": "get_min_max",
                    "F_name_impl": "get_min_max",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_getMinMax",
                    "c_const": "",
                    "function_name": "getMinMax",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "get_min_max"
                },
                "linenumber": 143,
                "options": {
                    "__line__": 146,
                    "literalinclude": true,
                    "wrap_lua": false
                }
            },
            {
                "_fmtargs": {
                    "in": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "in",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&in)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "in",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "in",
                            "f_type": "integer(C_INT)",
                            "f_var": "in",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        }
                    },
                    "incr": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "incr",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&incr)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "incr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "incr",
                            "f_var": "incr"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "callback1",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "in",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "func": {
                                    "name": "incr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "pointer": []
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "value": true
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int callback1(int in, int (*incr)(int));",
                "declgen": "int callback1(int in +intent(in)+value, int ( * incr)(int +value) +intent(in)+value)",
                "doxygen": {
                    "__line__": 154,
                    "brief": "Test function pointer"
                },
                "fmtdict": {
                    "C_call_list": "in,\t incr",
                    "C_name": "TUT_callback1",
                    "C_prototype": "int in,\t int ( * incr)(\tint)",
                    "C_return_type": "int",
                    "F_C_call": "c_callback1",
                    "F_C_name": "callback1",
                    "F_arg_c_call": "in,\t incr",
                    "F_arguments": "in,\t incr",
                    "F_name_function": "callback1",
                    "F_name_generic": "callback1",
                    "F_name_impl": "callback1",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "callback1",
                    "underscore_name": "callback1"
                },
                "linenumber": 153,
                "options": {
                    "__line__": 156,
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_string_pointer_result_",
                        "stmt1": "c_string_result"
                    },
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_string_scalar_result_result_as_arg",
                        "stmt1": "f_default",
                        "stmtc0": "c_string_scalar_result_buf",
                        "stmtc1": "c_string_result_buf"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv.c_str()",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_string_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result_as_arg",
                        "len": "30"
                    },
                    "const": true,
                    "declarator": {
                        "name": "LastFunctionCalled",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "result_as_arg",
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string& LastFunctionCalled() +len(30)",
                "declgen": "const std::string & LastFunctionCalled() +deref(result_as_arg)+len(30)",
                "fmtdict": {
                    "C_name": "TUT_last_function_called",
                    "C_prototype": "",
                    "C_return_type": "const char *",
                    "F_C_call": "c_last_function_called_bufferify",
                    "F_C_name": "c_last_function_called",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_name_function": "last_function_called",
                    "F_name_generic": "last_function_called",
                    "F_name_impl": "last_function_called",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "LastFunctionCalled",
                    "LUA_name_impl": "l_last_function_called",
                    "PY_name_impl": "PY_LastFunctionCalled",
                    "c_const": "const ",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "LastFunctionCalled",
                    "underscore_name": "last_function_called"
                },
                "linenumber": 163,
                "options": {}
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_len": "NSHF_rv",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&SHCXX_rv)",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_pointer_result_buf_",
                            "stmt1": "c_string_result_buf"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "f_type": "character(*)",
                            "f_var": "SHT_rv",
                            "stmt0": "f_string_pointer_result_",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_pointer_result_buf_",
                            "stmtc1": "c_string_result_buf"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": "30"
                    },
                    "declarator": {
                        "name": "LastFunctionCalled",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "intent": "out",
                                "len": "NSHF_rv"
                            },
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const std::string& LastFunctionCalled() +len(30)",
                "declgen": "void LastFunctionCalled(std::string & SHF_rv +intent(out)+len(NSHF_rv)) +len(30)",
                "fmtdict": {
                    "C_name": "TUT_last_function_called_bufferify",
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv",
                    "C_return_type": "void",
                    "F_C_name": "c_last_function_called_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "LastFunctionCalled",
                    "function_suffix": "_bufferify",
                    "underscore_name": "last_function_called"
                },
                "linenumber": 163,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            }
        ],
        "language": "cxx",
        "options": {
            "C_API_case": "native",
            "C_enum_member_template": "{C_prefix}{C_name_scope}{enum_member_name}",
            "C_enum_template": "{C_prefix}{C_name_scope}{enum_name}",
            "C_header_filename_class_template": "wrap{file_scope}.{C_header_filename_suffix}",
            "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}",
            "C_header_filename_namespace_template": "wrap{file_scope}.{C_header_filename_suffix}",
            "C_header_utility_template": "types{library}.{C_header_filename_suffix}",
            "C_impl_filename_class_template": "wrap{file_scope}.{C_impl_filename_suffix}",
            "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}",
            "C_impl_filename_namespace_template": "wrap{file_scope}.{C_impl_filename_suffix}",
            "C_line_length": 72,
            "C_memory_dtor_function_template": "{C_prefix}SHROUD_memory_destructor",
            "C_name_template": "{C_prefix}{C_name_scope}{underscore_name}{function_suffix}{template_suffix}",
            "C_var_capsule_template": "C{c_var}",
            "C_var_context_template": "D{c_var}",
            "C_var_len_template": "N{c_var}",
            "C_var_size_template": "S{c_var}",
            "C_var_trim_template": "L{c_var}",
            "F_C_name_template": "{F_C_prefix}{F_name_scope}{underscore_name}{function_suffix}{template_suffix}",
            "F_abstract_interface_argument_template": "arg{index}",
            "F_abstract_interface_subprogram_template": "{underscore_name}_{argname}",
            "F_auto_reference_count": false,
            "F_capsule_data_type_class_template": "SHROUD_{F_name_scope}capsule",
            "F_create_bufferify_function": true,
            "F_create_generic": true,
            "F_enum_member_template": "{F_name_scope}{enum_member_lower}",
            "F_flatten_namespace": false,
            "F_force_wrapper": false,
            "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}",
            "F_impl_filename_namespace_template": "wrapf{file_scope}.{F_filename_suffix}",
            "F_line_length": 72,
            "F_module_name_library_template": "{library_lower}_mod",
            "F_module_name_namespace_template": "{file_scope}_mod",
            "F_name_function_template": "{underscore_name}{function_suffix}{template_suffix}",
            "F_name_generic_template": "{underscore_name}",
            "F_name_impl_template": "{F_name_scope}{underscore_name}{function_suffix}{template_suffix}",
            "F_return_fortran_pointer": true,
            "F_standard": 2003,
            "F_string_len_trim": true,
            "LUA_class_reg_template": "{LUA_prefix}{cxx_class}_Reg",
            "LUA_ctor_name_template": "{cxx_class}",
            "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}",
            "LUA_metadata_template": "{cxx_class}.metatable",
            "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}",
            "LUA_module_name_template": "{library_lower}",
            "LUA_module_reg_template": "{LUA_prefix}{library}_Reg",
            "LUA_name_impl_template": "{LUA_prefix}{C_name_scope}{underscore_name}",
            "LUA_name_template": "{function_name}",
            "LUA_userdata_member_template": "self",
            "LUA_userdata_type_template": "{LUA_prefix}{cxx_class}_Type",
            "PY_PyObject_template": "{PY_prefix}{cxx_class}",
            "PY_PyTypeObject_template": "{PY_prefix}{cxx_class}_Type",
            "PY_array_arg": "numpy",
            "PY_capsule_destructor_function_template": "{PY_prefix}SHROUD_capsule_destructor",
            "PY_dtor_context_array_template": "{PY_prefix}SHROUD_capsule_context",
            "PY_dtor_context_typedef_template": "{PY_prefix}SHROUD_dtor_context",
            "PY_fetch_context_function_template": "{PY_prefix}SHROUD_fetch_context",
            "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}",
            "PY_member_getter_template": "{PY_prefix}{cxx_class}_{variable_name}_getter",
            "PY_member_setter_template": "{PY_prefix}{cxx_class}_{variable_name}_setter",
            "PY_module_filename_template": "py{file_scope}module.{PY_impl_filename_suffix}",
            "PY_name_impl_template": "{PY_prefix}{function_name}{function_suffix}{template_suffix}",
            "PY_numpy_array_capsule_name_template": "{PY_prefix}array_dtor",
            "PY_release_memory_function_template": "{PY_prefix}SHROUD_release_memory",
            "PY_struct_arg": "numpy",
            "PY_struct_array_descr_create_template": "{PY_prefix}{cxx_class}_create_array_descr",
            "PY_struct_array_descr_name_template": "{cxx_class}_dtype",
            "PY_struct_array_descr_variable_template": "{PY_prefix}{cxx_class}_array_descr",
            "PY_type_filename_template": "py{file_scope}type.{PY_impl_filename_suffix}",
            "PY_type_impl_template": "{PY_prefix}{cxx_class}_{PY_type_method}{function_suffix}{template_suffix}",
            "PY_utility_filename_template": "py{library}util.{PY_impl_filename_suffix}",
            "YAML_type_filename_template": "{library_lower}_types.yaml",
            "__line__": 15,
            "debug": true,
            "debug_index": false,
            "doxygen": true,
            "flatten_namespace": false,
            "literalinclude": false,
            "literalinclude2": true,
            "return_scalar_pointer": "pointer",
            "show_splicer_comments": true,
            "wrap_c": true,
            "wrap_fortran": true,
            "wrap_lua": true,
            "wrap_python": true
        },
        "scope_file": [
            "Tutorial"
        ],
        "variables": [
            {
                "ast": {
                    "declarator": {
                        "name": "global_flag",
                        "pointer": []
                    },
                    "specifier": [
                        "int"
                    ],
                    "storage": [
                        "extern"
                    ],
                    "typemap_name": "int"
                },
                "fmtdict": {
                    "field_name": "global_flag",
                    "variable_lower": "global_flag",
                    "variable_name": "global_flag",
                    "variable_upper": "GLOBAL_FLAG"
                },
                "linenumber": 23,
                "name": "global_flag",
                "options": {}
            },
            {
                "ast": {
                    "declarator": {
                        "name": "tutorial_flag",
                        "pointer": []
                    },
                    "specifier": [
                        "int"
                    ],
                    "storage": [
                        "extern"
                    ],
                    "typemap_name": "int"
                },
                "fmtdict": {
                    "field_name": "tutorial_flag",
                    "variable_lower": "tutorial_flag",
                    "variable_name": "tutorial_flag",
                    "variable_upper": "TUTORIAL_FLAG"
                },
                "linenumber": 43,
                "name": "tutorial_flag",
                "options": {}
            }
        ]
    }
}