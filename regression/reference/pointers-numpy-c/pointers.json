{
    "__NOTICE__": "This file is generated by Shroud and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2020, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "pointers.hpp"
        ],
        "fmtdict": {
            "CXX_local": "SHCXX_",
            "CXX_template": "",
            "CXX_this": "SH_this",
            "CXX_this_call": "",
            "C_array_type": "POI_SHROUD_array",
            "C_bufferify_suffix": "_bufferify",
            "C_call_list": "",
            "C_capsule_data_type": "POI_SHROUD_capsule_data",
            "C_custom_return_type": "",
            "C_header_filename": "wrappointers.h",
            "C_header_filename_suffix": "h",
            "C_header_utility": "typespointers.h",
            "C_impl_filename": "wrappointers.c",
            "C_impl_filename_suffix": "c",
            "C_local": "SHC_",
            "C_memory_dtor_function": "POI_SHROUD_memory_destructor",
            "C_name_scope": "",
            "C_post_call": "",
            "C_pre_call": "",
            "C_prefix": "POI_",
            "C_result": "rv",
            "C_string_result_as_arg": "SHF_rv",
            "C_this": "self",
            "F_C_prefix": "c_",
            "F_arg_c_call": "",
            "F_array_type": "SHROUD_array",
            "F_capsule_data_type": "SHROUD_capsule_data",
            "F_capsule_final_function": "SHROUD_capsule_final",
            "F_capsule_type": "SHROUD_capsule",
            "F_derived_member": "cxxmem",
            "F_filename_suffix": "f",
            "F_impl_filename": "wrapfpointers.f",
            "F_module_name": "pointers_mod",
            "F_name_assign": "assign",
            "F_name_associated": "associated",
            "F_name_final": "final",
            "F_name_instance_get": "get_instance",
            "F_name_instance_set": "set_instance",
            "F_name_scope": "",
            "F_pointer": "SHT_ptr",
            "F_result": "SHT_rv",
            "F_result_capsule": "SHT_crv",
            "F_result_ptr": "SHT_prv",
            "F_string_result_as_arg": "",
            "F_this": "obj",
            "LUA_header_filename_suffix": "h",
            "LUA_impl_filename_suffix": "c",
            "LUA_prefix": "l_",
            "LUA_result": "rv",
            "LUA_state_var": "L",
            "LUA_this_call": "",
            "PY_PyObject": "PyObject",
            "PY_capsule_destructor_function": "PY_SHROUD_capsule_destructor",
            "PY_dtor_context_array": "PY_SHROUD_capsule_context",
            "PY_dtor_context_typedef": "PY_SHROUD_dtor_context",
            "PY_extern_C_begin": "",
            "PY_fetch_context_function": "PY_SHROUD_fetch_context",
            "PY_header_filename": "pypointersmodule.h",
            "PY_header_filename_suffix": "h",
            "PY_impl_filename_suffix": "c",
            "PY_library_doc": "library documentation",
            "PY_module_filename": "pypointersmodule.c",
            "PY_module_init": "pointers",
            "PY_module_name": "pointers",
            "PY_module_scope": "pointers",
            "PY_numpy_array_capsule_name": "PY_array_dtor",
            "PY_param_args": "args",
            "PY_param_kwds": "kwds",
            "PY_param_self": "self",
            "PY_prefix": "PY_",
            "PY_release_memory_function": "PY_SHROUD_release_memory",
            "PY_result": "SHTPy_rv",
            "PY_this_call": "",
            "PY_type_dtor": "idtor",
            "PY_type_obj": "obj",
            "PY_used_param_args": false,
            "PY_used_param_kwds": false,
            "PY_used_param_self": false,
            "PY_utility_filename": "pypointersutil.c",
            "PyObject": "PyObject",
            "YAML_type_filename": "pointers_types.yaml",
            "c_temp": "SHT_",
            "capsule_order": "0",
            "cast1": ") ",
            "cast2": "",
            "cast_const": "(",
            "cast_reinterpret": "(",
            "cast_static": "(",
            "class_scope": "",
            "cxx_class": "",
            "f_pointer_shape": "",
            "f_var_shape": "",
            "file_scope": "pointers",
            "function_suffix": "",
            "library": "pointers",
            "library_lower": "pointers",
            "library_upper": "POINTERS",
            "namespace_scope": "",
            "npy_dims": "NULL",
            "npy_intp": "",
            "npy_ndims": "0",
            "stdlib": "",
            "template_suffix": "",
            "void_proto": "void"
        },
        "functions": [
            {
                "_fmtargs": {
                    "argin": {
                        "fmtpy": {
                            "c_const": "const ",
                            "c_decl": "int argin",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "argin",
                            "cxx_addr": "&",
                            "cxx_decl": "int argin",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "argin",
                            "data_var": "SHData_argin",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_argin",
                            "size_var": "SHSize_argin",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    },
                    "arginout": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arginout",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arginout",
                            "cxx_addr": "",
                            "cxx_decl": "int arginout",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "arginout",
                            "data_var": "SHData_arginout",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arginout",
                            "size_var": "SHSize_arginout",
                            "stmt0": "py_native_inout",
                            "stmt1": "py_default"
                        }
                    },
                    "argout": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int argout",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "argout",
                            "cxx_addr": "",
                            "cxx_decl": "int argout",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "argout",
                            "data_var": "SHData_argout",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_argout",
                            "size_var": "SHSize_argout",
                            "stmt0": "py_native_out",
                            "stmt1": "py_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "intargs",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "const": true,
                            "declarator": {
                                "name": "argin",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "inout",
                                "value": false
                            },
                            "declarator": {
                                "name": "arginout",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "argout",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void  intargs(const int argin      +intent(in), int * arginout +intent(inout), int * argout   +intent(out))",
                "declgen": "void intargs(const int argin +intent(in)+value, int * arginout +intent(inout), int * argout +intent(out))",
                "fmtdict": {
                    "PY_name_impl": "PY_intargs",
                    "function_name": "intargs",
                    "underscore_name": "intargs"
                },
                "linenumber": 23,
                "options": {}
            },
            {
                "_fmtargs": {
                    "in": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "double",
                            "c_var": "in",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "double",
                            "cxx_var": "in",
                            "data_var": "SHData_in",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_in",
                            "pytmp_var": "SHTPy_in",
                            "size_var": "SHSize_in",
                            "stmt0": "py_native_in_dimension_numpy",
                            "stmt1": "py_native_in_dimension_numpy"
                        }
                    },
                    "out": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "double",
                            "c_var": "out",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "double",
                            "cxx_var": "out",
                            "data_var": "SHData_out",
                            "npy_descr": "NULL",
                            "npy_descr_code": "",
                            "npy_order": "NPY_CORDER",
                            "npy_prototype": "SHPy_in",
                            "npy_subok": "0",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_out",
                            "size_var": "SHSize_in",
                            "stmt0": "py_native_out_allocatable_numpy",
                            "stmt1": "py_native_out_allocatable_numpy"
                        }
                    },
                    "sizein": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int sizein",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "sizein",
                            "cxx_addr": "&",
                            "cxx_decl": "int sizein",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "sizein",
                            "data_var": "SHData_sizein",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "PyArray_SIZE(SHPy_in)",
                            "py_var": "SHPy_sizein",
                            "size_var": "SHSize_sizein"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "cos_doubles",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "in",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "allocatable": "mold=in",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "out",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "implied": "size(in)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "sizein",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void cos_doubles(double * in     +intent(in)  +dimension(:), double * out    +intent(out) +allocatable(mold=in), int      sizein +implied(size(in)))",
                "declgen": "void cos_doubles(double * in +dimension(:)+intent(in), double * out +allocatable(mold=in)+intent(out), int sizein +implied(size(in))+intent(in)+value)",
                "doxygen": {
                    "__line__": 30,
                    "brief": "compute cos of IN and save in OUT",
                    "description": "allocate OUT same type as IN implied size of array"
                },
                "fmtdict": {
                    "PY_name_impl": "PY_cos_doubles",
                    "function_name": "cos_doubles",
                    "underscore_name": "cos_doubles"
                },
                "linenumber": 27,
                "options": {}
            },
            {
                "_fmtargs": {
                    "in": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "double",
                            "c_var": "in",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "double",
                            "cxx_var": "in",
                            "data_var": "SHData_in",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_in",
                            "pytmp_var": "SHTPy_in",
                            "size_var": "SHSize_in",
                            "stmt0": "py_native_in_dimension_numpy",
                            "stmt1": "py_native_in_dimension_numpy"
                        }
                    },
                    "out": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "out",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "out",
                            "data_var": "SHData_out",
                            "npy_descr": "SHDPy_out",
                            "npy_descr_code": "PyArray_Descr * SHDPy_out = PyArray_DescrFromType(NPY_INT);\n",
                            "npy_order": "NPY_CORDER",
                            "npy_prototype": "SHPy_in",
                            "npy_subok": "0",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_out",
                            "size_var": "SHSize_in",
                            "stmt0": "py_native_out_allocatable_numpy",
                            "stmt1": "py_native_out_allocatable_numpy"
                        }
                    },
                    "sizein": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int sizein",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "sizein",
                            "cxx_addr": "&",
                            "cxx_decl": "int sizein",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "sizein",
                            "data_var": "SHData_sizein",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "PyArray_SIZE(SHPy_in)",
                            "py_var": "SHPy_sizein",
                            "size_var": "SHSize_sizein"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "truncate_to_int",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "in",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "allocatable": "mold=in",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "out",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "size(in)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "sizein",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void truncate_to_int(double * in     +intent(in)  +dimension(:), int *    out    +intent(out) +allocatable(mold=in), int      sizein +implied(size(in)))",
                "declgen": "void truncate_to_int(double * in +dimension(:)+intent(in), int * out +allocatable(mold=in)+intent(out), int sizein +implied(size(in))+intent(in)+value)",
                "doxygen": {
                    "__line__": 39,
                    "brief": "truncate IN argument and save in OUT",
                    "description": "allocate OUT different type as IN\nimplied size of array\n"
                },
                "fmtdict": {
                    "PY_name_impl": "PY_truncate_to_int",
                    "function_name": "truncate_to_int",
                    "underscore_name": "truncate_to_int"
                },
                "linenumber": 36,
                "options": {}
            },
            {
                "_fmtargs": {
                    "nvalues": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int nvalues",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "nvalues",
                            "cxx_addr": "",
                            "cxx_decl": "int nvalues",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "nvalues",
                            "data_var": "SHData_nvalues",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_nvalues",
                            "size_var": "SHSize_nvalues",
                            "stmt0": "py_native_out",
                            "stmt1": "py_default"
                        }
                    },
                    "values": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "values",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "data_var": "SHData_values",
                            "npy_dims": "SHD_values",
                            "npy_intp": "npy_intp SHD_values[1] = {3};\n",
                            "npy_ndims": "1",
                            "numpy_type": "NPY_INT",
                            "pointer_shape": "3",
                            "py_var": "SHPy_values",
                            "size_var": "SHSize_values",
                            "stmt0": "py_native_out_dimension_numpy",
                            "stmt1": "py_native_out_dimension_numpy"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "get_values",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "nvalues",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "dimension": "3",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "values",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void get_values(int *nvalues+intent(OUT), int *values +intent(out)+dimension(3))",
                "declgen": "void get_values(int * nvalues +intent(out), int * values +dimension(3)+intent(out))",
                "doxygen": {
                    "__line__": 46,
                    "brief": "fill values into array",
                    "description": "The function knows how long the array must be.\nFortran will treat the dimension as assumed-length.\nThe Python wrapper will create a NumPy array or list so it must\nhave an explicit dimension (not assumed-length).\n"
                },
                "fmtdict": {
                    "PY_name_impl": "PY_get_values",
                    "function_name": "get_values",
                    "underscore_name": "get_values"
                },
                "linenumber": 45,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "arg1",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "npy_dims": "SHD_arg1",
                            "npy_intp": "npy_intp SHD_arg1[1] = {3};\n",
                            "npy_ndims": "1",
                            "numpy_type": "NPY_INT",
                            "pointer_shape": "3",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_native_out_dimension_numpy",
                            "stmt1": "py_native_out_dimension_numpy"
                        }
                    },
                    "arg2": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "arg2",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "npy_dims": "SHD_arg2",
                            "npy_intp": "npy_intp SHD_arg2[1] = {3};\n",
                            "npy_ndims": "1",
                            "numpy_type": "NPY_INT",
                            "pointer_shape": "3",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt0": "py_native_out_dimension_numpy",
                            "stmt1": "py_native_out_dimension_numpy"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "get_values2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": "3",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "dimension": "3",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void get_values2(int *arg1 +intent(out)+dimension(3), int *arg2 +intent(out)+dimension(3))",
                "declgen": "void get_values2(int * arg1 +dimension(3)+intent(out), int * arg2 +dimension(3)+intent(out))",
                "doxygen": {
                    "__line__": 56,
                    "brief": "fill values into two arrays",
                    "description": "Test two intent(out) arguments.\nMake sure error handling works with C++.\n"
                },
                "fmtdict": {
                    "PY_name_impl": "PY_get_values2",
                    "function_name": "get_values2",
                    "underscore_name": "get_values2"
                },
                "linenumber": 54,
                "options": {}
            },
            {
                "_fmtargs": {
                    "len": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int len",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "len",
                            "cxx_addr": "&",
                            "cxx_decl": "int len",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "len",
                            "data_var": "SHData_len",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "PyArray_SIZE(SHPy_values)",
                            "py_var": "SHPy_len",
                            "size_var": "SHSize_len"
                        }
                    },
                    "result": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int result",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "result",
                            "cxx_addr": "",
                            "cxx_decl": "int result",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "result",
                            "data_var": "SHData_result",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_result",
                            "size_var": "SHSize_result",
                            "stmt0": "py_native_out",
                            "stmt1": "py_default"
                        }
                    },
                    "values": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "values",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "data_var": "SHData_values",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_values",
                            "pytmp_var": "SHTPy_values",
                            "size_var": "SHSize_values",
                            "stmt0": "py_native_in_dimension_numpy",
                            "stmt1": "py_native_in_dimension_numpy"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "Sum",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "implied": "size(values)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "len",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "values",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "result",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void Sum(int len +implied(size(values)), int *values +dimension(:)+intent(in), int *result +intent(out))",
                "declgen": "void Sum(int len +implied(size(values))+intent(in)+value, int * values +dimension(:)+intent(in), int * result +intent(out))",
                "fmtdict": {
                    "PY_name_impl": "PY_Sum",
                    "function_name": "Sum",
                    "underscore_name": "sum"
                },
                "linenumber": 67,
                "options": {
                    "__line__": 70,
                    "literalinclude": true,
                    "wrap_lua": false
                }
            },
            {
                "_fmtargs": {
                    "out": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "out",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "out",
                            "data_var": "SHData_out",
                            "npy_dims": "SHD_out",
                            "npy_intp": "npy_intp SHD_out[1] = {3};\n",
                            "npy_ndims": "1",
                            "numpy_type": "NPY_INT",
                            "pointer_shape": "3",
                            "py_var": "SHPy_out",
                            "size_var": "SHSize_out",
                            "stmt0": "py_native_out_dimension_numpy",
                            "stmt1": "py_native_out_dimension_numpy"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "fillIntArray",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": "3",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "out",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void fillIntArray(int *out +intent(out)+dimension(3))",
                "declgen": "void fillIntArray(int * out +dimension(3)+intent(out))",
                "doxygen": {
                    "__line__": 76,
                    "description": "Return three values into memory the user provides.\n"
                },
                "fmtdict": {
                    "PY_name_impl": "PY_fillIntArray",
                    "function_name": "fillIntArray",
                    "underscore_name": "fill_int_array"
                },
                "linenumber": 75,
                "options": {}
            },
            {
                "_fmtargs": {
                    "array": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "array",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "array",
                            "data_var": "SHData_array",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_array",
                            "pytmp_var": "SHTPy_array",
                            "size_var": "SHSize_array",
                            "stmt0": "py_native_inout_dimension_numpy",
                            "stmt1": "py_native_inout_dimension_numpy"
                        }
                    },
                    "sizein": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int sizein",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "sizein",
                            "cxx_addr": "&",
                            "cxx_decl": "int sizein",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "sizein",
                            "data_var": "SHData_sizein",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "PyArray_SIZE(SHPy_array)",
                            "py_var": "SHPy_sizein",
                            "size_var": "SHSize_sizein"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "incrementIntArray",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "inout",
                                "value": false
                            },
                            "declarator": {
                                "name": "array",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "size(array)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "sizein",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void incrementIntArray(int * array  +dimension(:)+intent(inout), int   sizein +implied(size(array)))",
                "declgen": "void incrementIntArray(int * array +dimension(:)+intent(inout), int sizein +implied(size(array))+intent(in)+value)",
                "doxygen": {
                    "__line__": 82,
                    "description": "Increment array in place using intent(INOUT).\n"
                },
                "fmtdict": {
                    "PY_name_impl": "PY_incrementIntArray",
                    "function_name": "incrementIntArray",
                    "underscore_name": "increment_int_array"
                },
                "linenumber": 80,
                "options": {}
            }
        ],
        "language": "c",
        "options": {
            "C_API_case": "native",
            "C_enum_member_template": "{C_prefix}{C_name_scope}{enum_member_name}",
            "C_enum_template": "{C_prefix}{C_name_scope}{enum_name}",
            "C_header_filename_class_template": "wrap{file_scope}.{C_header_filename_suffix}",
            "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}",
            "C_header_filename_namespace_template": "wrap{file_scope}.{C_header_filename_suffix}",
            "C_header_utility_template": "types{library}.{C_header_filename_suffix}",
            "C_impl_filename_class_template": "wrap{file_scope}.{C_impl_filename_suffix}",
            "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}",
            "C_impl_filename_namespace_template": "wrap{file_scope}.{C_impl_filename_suffix}",
            "C_line_length": 72,
            "C_memory_dtor_function_template": "{C_prefix}SHROUD_memory_destructor",
            "C_name_template": "{C_prefix}{C_name_scope}{underscore_name}{function_suffix}{template_suffix}",
            "C_var_capsule_template": "C{c_var}",
            "C_var_context_template": "D{c_var}",
            "C_var_len_template": "N{c_var}",
            "C_var_size_template": "S{c_var}",
            "C_var_trim_template": "L{c_var}",
            "F_C_name_template": "{F_C_prefix}{F_name_scope}{underscore_name}{function_suffix}{template_suffix}",
            "F_abstract_interface_argument_template": "arg{index}",
            "F_abstract_interface_subprogram_template": "{underscore_name}_{argname}",
            "F_auto_reference_count": false,
            "F_capsule_data_type_class_template": "SHROUD_{F_name_scope}capsule",
            "F_create_bufferify_function": true,
            "F_create_generic": true,
            "F_enum_member_template": "{F_name_scope}{enum_member_lower}",
            "F_flatten_namespace": false,
            "F_force_wrapper": false,
            "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}",
            "F_impl_filename_namespace_template": "wrapf{file_scope}.{F_filename_suffix}",
            "F_line_length": 72,
            "F_module_name_library_template": "{library_lower}_mod",
            "F_module_name_namespace_template": "{file_scope}_mod",
            "F_name_function_template": "{underscore_name}{function_suffix}{template_suffix}",
            "F_name_generic_template": "{underscore_name}",
            "F_name_impl_template": "{F_name_scope}{underscore_name}{function_suffix}{template_suffix}",
            "F_return_fortran_pointer": true,
            "F_standard": 2003,
            "F_string_len_trim": true,
            "LUA_class_reg_template": "{LUA_prefix}{cxx_class}_Reg",
            "LUA_ctor_name_template": "{cxx_class}",
            "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}",
            "LUA_metadata_template": "{cxx_class}.metatable",
            "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}",
            "LUA_module_name_template": "{library_lower}",
            "LUA_module_reg_template": "{LUA_prefix}{library}_Reg",
            "LUA_name_impl_template": "{LUA_prefix}{C_name_scope}{underscore_name}",
            "LUA_name_template": "{function_name}",
            "LUA_userdata_member_template": "self",
            "LUA_userdata_type_template": "{LUA_prefix}{cxx_class}_Type",
            "PY_PyObject_template": "{PY_prefix}{cxx_class}",
            "PY_PyTypeObject_template": "{PY_prefix}{cxx_class}_Type",
            "PY_array_arg": "numpy",
            "PY_capsule_destructor_function_template": "{PY_prefix}SHROUD_capsule_destructor",
            "PY_dtor_context_array_template": "{PY_prefix}SHROUD_capsule_context",
            "PY_dtor_context_typedef_template": "{PY_prefix}SHROUD_dtor_context",
            "PY_fetch_context_function_template": "{PY_prefix}SHROUD_fetch_context",
            "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}",
            "PY_member_getter_template": "{PY_prefix}{cxx_class}_{variable_name}_getter",
            "PY_member_setter_template": "{PY_prefix}{cxx_class}_{variable_name}_setter",
            "PY_module_filename_template": "py{file_scope}module.{PY_impl_filename_suffix}",
            "PY_name_impl_template": "{PY_prefix}{function_name}{function_suffix}{template_suffix}",
            "PY_numpy_array_capsule_name_template": "{PY_prefix}array_dtor",
            "PY_release_memory_function_template": "{PY_prefix}SHROUD_release_memory",
            "PY_struct_arg": "numpy",
            "PY_struct_array_descr_create_template": "{PY_prefix}{cxx_class}_create_array_descr",
            "PY_struct_array_descr_name_template": "{cxx_class}_dtype",
            "PY_struct_array_descr_variable_template": "{PY_prefix}{cxx_class}_array_descr",
            "PY_type_filename_template": "py{file_scope}type.{PY_impl_filename_suffix}",
            "PY_type_impl_template": "{PY_prefix}{cxx_class}_{PY_type_method}{function_suffix}{template_suffix}",
            "PY_utility_filename_template": "py{library}util.{PY_impl_filename_suffix}",
            "YAML_type_filename_template": "{library_lower}_types.yaml",
            "__line__": 16,
            "debug": true,
            "debug_index": false,
            "doxygen": true,
            "flatten_namespace": false,
            "literalinclude": false,
            "literalinclude2": false,
            "return_scalar_pointer": "pointer",
            "show_splicer_comments": true,
            "wrap_c": false,
            "wrap_fortran": false,
            "wrap_lua": false,
            "wrap_python": true
        },
        "scope_file": [
            "pointers"
        ]
    }
}