{
    "__NOTICE__": "This file is generated by Shroud and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2020, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "vectors.hpp"
        ],
        "fmtdict": {
            "CXX_local": "SHCXX_",
            "CXX_template": "",
            "CXX_this": "SH_this",
            "CXX_this_call": "",
            "C_array_type": "VEC_SHROUD_array",
            "C_bufferify_suffix": "_bufferify",
            "C_call_list": "",
            "C_capsule_data_type": "VEC_SHROUD_capsule_data",
            "C_custom_return_type": "",
            "C_header_filename": "wrapvectors.h",
            "C_header_filename_suffix": "h",
            "C_header_utility": "typesvectors.h",
            "C_impl_filename": "wrapvectors.cpp",
            "C_impl_filename_suffix": "cpp",
            "C_local": "SHC_",
            "C_memory_dtor_function": "VEC_SHROUD_memory_destructor",
            "C_name_scope": "",
            "C_post_call": "",
            "C_pre_call": "",
            "C_prefix": "VEC_",
            "C_result": "rv",
            "C_string_result_as_arg": "SHF_rv",
            "C_this": "self",
            "F_C_prefix": "c_",
            "F_arg_c_call": "",
            "F_array_type": "SHROUD_array",
            "F_capsule_data_type": "SHROUD_capsule_data",
            "F_capsule_final_function": "SHROUD_capsule_final",
            "F_capsule_type": "SHROUD_capsule",
            "F_derived_member": "cxxmem",
            "F_filename_suffix": "f",
            "F_impl_filename": "wrapfvectors.f",
            "F_module_name": "vectors_mod",
            "F_name_assign": "assign",
            "F_name_associated": "associated",
            "F_name_final": "final",
            "F_name_instance_get": "get_instance",
            "F_name_instance_set": "set_instance",
            "F_name_scope": "",
            "F_pointer": "SHT_ptr",
            "F_result": "SHT_rv",
            "F_result_capsule": "SHT_crv",
            "F_result_ptr": "SHT_prv",
            "F_string_result_as_arg": "",
            "F_this": "obj",
            "LUA_header_filename_suffix": "hpp",
            "LUA_impl_filename_suffix": "cpp",
            "LUA_prefix": "l_",
            "LUA_result": "rv",
            "LUA_state_var": "L",
            "LUA_this_call": "",
            "PY_PyObject": "PyObject",
            "PY_capsule_destructor_function": "PY_SHROUD_capsule_destructor",
            "PY_dtor_context_array": "PY_SHROUD_capsule_context",
            "PY_dtor_context_typedef": "PY_SHROUD_dtor_context",
            "PY_extern_C_begin": "extern \"C\" ",
            "PY_fetch_context_function": "PY_SHROUD_fetch_context",
            "PY_header_filename": "pyvectorsmodule.hpp",
            "PY_header_filename_suffix": "hpp",
            "PY_impl_filename_suffix": "cpp",
            "PY_library_doc": "library documentation",
            "PY_module_filename": "pyvectorsmodule.cpp",
            "PY_module_init": "vectors",
            "PY_module_name": "vectors",
            "PY_module_scope": "vectors",
            "PY_numpy_array_capsule_name": "PY_array_dtor",
            "PY_param_args": "args",
            "PY_param_kwds": "kwds",
            "PY_param_self": "self",
            "PY_prefix": "PY_",
            "PY_release_memory_function": "PY_SHROUD_release_memory",
            "PY_result": "SHTPy_rv",
            "PY_this_call": "",
            "PY_type_dtor": "idtor",
            "PY_type_obj": "obj",
            "PY_used_param_args": false,
            "PY_used_param_kwds": false,
            "PY_used_param_self": false,
            "PY_utility_filename": "pyvectorsutil.cpp",
            "PyObject": "PyObject",
            "YAML_type_filename": "vectors_types.yaml",
            "c_temp": "SHT_",
            "capsule_order": "0",
            "cast1": ">\t(",
            "cast2": ")",
            "cast_const": "const_cast<",
            "cast_reinterpret": "reinterpret_cast<",
            "cast_static": "static_cast<",
            "class_scope": "",
            "cxx_class": "",
            "f_pointer_shape": "",
            "f_var_shape": "",
            "file_scope": "vectors",
            "function_suffix": "",
            "library": "vectors",
            "library_lower": "vectors",
            "library_upper": "VECTORS",
            "namespace_scope": "",
            "npy_dims": "NULL",
            "npy_intp": "",
            "npy_ndims": "0",
            "stdlib": "std::",
            "template_suffix": "",
            "void_proto": ""
        },
        "functions": [
            {
                "_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": null,
                            "c_var": "arg",
                            "cxx_T": "int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::vector<int>",
                            "cxx_var": "SH_arg",
                            "data_var": "SHData_arg",
                            "npy_dims": "SHD_arg",
                            "npy_intp": "npy_intp SHD_arg[1];\n",
                            "npy_ndims": "1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "pytmp_var": "SHTPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_vector_in_numpy",
                            "stmt1": "py_vector_in_numpy"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "vector_sum",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int vector_sum(const std::vector<int> &arg)",
                "declgen": "int vector_sum(const std::vector<int> & arg +dimension(:)+intent(in))",
                "fmtdict": {
                    "PY_name_impl": "PY_vector_sum",
                    "function_name": "vector_sum",
                    "underscore_name": "vector_sum"
                },
                "linenumber": 25,
                "options": {
                    "__line__": 26,
                    "literalinclude": true,
                    "wrap_lua": false
                }
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": null,
                            "c_var": "arg",
                            "capsule_order": "1",
                            "cxx_T": "int",
                            "cxx_addr": "",
                            "cxx_alloc_decl": "std::vector<int> * SH_arg",
                            "cxx_member": "->",
                            "cxx_type": "std::vector<int>",
                            "cxx_var": "SH_arg",
                            "data_var": "SHData_arg",
                            "npy_dims": "SHD_arg",
                            "npy_intp": "npy_intp SHD_arg[1];\n",
                            "npy_ndims": "1",
                            "numpy_type": "NPY_INT",
                            "py_capsule": "SHC_arg",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_vector_out_numpy",
                            "stmt1": "py_vector_out_numpy"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "vector_iota_out",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out(std::vector<int> &arg+intent(out))",
                "declgen": "void vector_iota_out(std::vector<int> & arg +dimension(:)+intent(out))",
                "doxygen": {
                    "__line__": 32,
                    "brief": "Copy vector into Fortran input array"
                },
                "fmtdict": {
                    "PY_name_impl": "PY_vector_iota_out",
                    "function_name": "vector_iota_out",
                    "underscore_name": "vector_iota_out"
                },
                "linenumber": 31,
                "options": {
                    "__line__": 34,
                    "literalinclude": true,
                    "wrap_lua": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "vector_iota_out_with_num",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out_with_num(std::vector<int> &arg+intent(out))",
                "declgen": "void vector_iota_out_with_num(std::vector<int> & arg +dimension(:)+intent(out))",
                "doxygen": {
                    "__line__": 40,
                    "brief": "Copy vector into Fortran input array",
                    "description": "Return the number of items copied into argument\nby setting fstatements for both C and Fortran.\n"
                },
                "fmtdict": {
                    "function_name": "vector_iota_out_with_num",
                    "underscore_name": "vector_iota_out_with_num"
                },
                "fstatements": {
                    "c_buf": {
                        "__line__": 50,
                        "ret": [
                            "return Darg->size;"
                        ],
                        "return_type": "long"
                    },
                    "f": {
                        "__line__": 54,
                        "call": [
                            "{F_result} = {F_C_call}({F_arg_c_call})"
                        ],
                        "declare": [
                            "integer(C_LONG) :: {F_result}"
                        ],
                        "f_module": {
                            "__line__": 56,
                            "iso_c_binding": [
                                "C_LONG"
                            ]
                        },
                        "result": "num"
                    }
                },
                "linenumber": 39,
                "options": {
                    "__line__": 45,
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "vector_iota_out_with_num2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out_with_num2(std::vector<int> &arg+intent(out))",
                "declgen": "void vector_iota_out_with_num2(std::vector<int> & arg +dimension(:)+intent(out))",
                "doxygen": {
                    "__line__": 64,
                    "brief": "Copy vector into Fortran input array",
                    "description": "Return the number of items copied into argument\nby setting fstatements for the Fortran wrapper only.\n"
                },
                "fmtdict": {
                    "function_name": "vector_iota_out_with_num2",
                    "underscore_name": "vector_iota_out_with_num2"
                },
                "fstatements": {
                    "f": {
                        "__line__": 74,
                        "declare": [
                            "integer(C_LONG) :: num"
                        ],
                        "f_module": {
                            "__line__": 76,
                            "iso_c_binding": [
                                "C_LONG"
                            ]
                        },
                        "post_call": [
                            "num = Darg%size"
                        ],
                        "result": "num"
                    }
                },
                "linenumber": 63,
                "options": {
                    "__line__": 69,
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "vector_iota_out_alloc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "deref": "allocatable",
                                "dimension": ":",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out_alloc(std::vector<int> &arg+intent(out)+deref(allocatable))",
                "declgen": "void vector_iota_out_alloc(std::vector<int> & arg +deref(allocatable)+dimension(:)+intent(out))",
                "doxygen": {
                    "__line__": 84,
                    "brief": "Copy vector into Fortran allocatable array"
                },
                "fmtdict": {
                    "function_name": "vector_iota_out_alloc",
                    "underscore_name": "vector_iota_out_alloc"
                },
                "linenumber": 83,
                "options": {
                    "__line__": 86,
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "vector_iota_inout_alloc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "deref": "allocatable",
                                "dimension": ":",
                                "intent": "inout",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_inout_alloc(std::vector<int> &arg+intent(inout)+deref(allocatable))",
                "declgen": "void vector_iota_inout_alloc(std::vector<int> & arg +deref(allocatable)+dimension(:)+intent(inout))",
                "doxygen": {
                    "__line__": 92,
                    "brief": "Copy vector into Fortran allocatable array"
                },
                "fmtdict": {
                    "function_name": "vector_iota_inout_alloc",
                    "underscore_name": "vector_iota_inout_alloc"
                },
                "linenumber": 91,
                "options": {
                    "__line__": 94,
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "vector_increment",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "inout",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_increment(std::vector<int> &arg)",
                "declgen": "void vector_increment(std::vector<int> & arg +dimension(:)+intent(inout))",
                "fmtdict": {
                    "function_name": "vector_increment",
                    "underscore_name": "vector_increment"
                },
                "linenumber": 100,
                "options": {
                    "__line__": 101,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": null,
                            "c_var": "arg",
                            "capsule_order": "2",
                            "cxx_T": "double",
                            "cxx_addr": "",
                            "cxx_alloc_decl": "std::vector<double> * SH_arg",
                            "cxx_member": "->",
                            "cxx_type": "std::vector<double>",
                            "cxx_var": "SH_arg",
                            "data_var": "SHData_arg",
                            "npy_dims": "SHD_arg",
                            "npy_intp": "npy_intp SHD_arg[1];\n",
                            "npy_ndims": "1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_capsule": "SHC_arg",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_vector_out_numpy",
                            "stmt1": "py_vector_out_numpy"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "vector_iota_out_d",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "double"
                                    ],
                                    "typemap_name": "double"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out_d(std::vector<double> &arg+intent(out))",
                "declgen": "void vector_iota_out_d(std::vector<double> & arg +dimension(:)+intent(out))",
                "doxygen": {
                    "__line__": 112,
                    "brief": "Copy vector into Fortran input array"
                },
                "fmtdict": {
                    "PY_name_impl": "PY_vector_iota_out_d",
                    "function_name": "vector_iota_out_d",
                    "underscore_name": "vector_iota_out_d"
                },
                "linenumber": 111,
                "options": {
                    "__line__": 114,
                    "wrap_lua": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "vector_string_count",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "std::string"
                                    ],
                                    "typemap_name": "std::string"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int vector_string_count(const std::vector< std::string > &arg)",
                "declgen": "int vector_string_count(const std::vector<std::string> & arg +dimension(:)+intent(in))",
                "doxygen": {
                    "__line__": 120,
                    "brief": "count number of underscore in vector of strings",
                    "decription": "The input will be copied in order to create the C++ argument\n"
                },
                "fmtdict": {
                    "function_name": "vector_string_count",
                    "underscore_name": "vector_string_count"
                },
                "linenumber": 119,
                "options": {
                    "__line__": 124,
                    "wrap_python": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "vector_string_fill",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "std::string"
                                    ],
                                    "typemap_name": "std::string"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_string_fill(std::vector< std::string > &arg+intent(out))",
                "declgen": "void vector_string_fill(std::vector<std::string> & arg +dimension(:)+intent(out))",
                "doxygen": {
                    "__line__": 136,
                    "brief": "Fill in arg with some animal names",
                    "description": "The C++ function returns void. But the C and Fortran wrappers return\nan int with the number of items added to arg.\n"
                },
                "fmtdict": {
                    "function_name": "vector_string_fill",
                    "underscore_name": "vector_string_fill"
                },
                "linenumber": 127,
                "options": {
                    "__line__": 128,
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "vector_string_append",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "inout",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "std::string"
                                    ],
                                    "typemap_name": "std::string"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_string_append(std::vector< std::string > &arg+intent(inout))",
                "declgen": "void vector_string_append(std::vector<std::string> & arg +dimension(:)+intent(inout))",
                "doxygen": {
                    "__line__": 148,
                    "brief": "append '-like' to names."
                },
                "fmtdict": {
                    "function_name": "vector_string_append",
                    "underscore_name": "vector_string_append"
                },
                "linenumber": 142,
                "options": {
                    "__line__": 143,
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "n": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int n",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "n",
                            "cxx_addr": "&",
                            "cxx_decl": "int n",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "n",
                            "data_var": "SHData_n",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_n",
                            "size_var": "SHSize_n",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtpy": {
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "capsule_order": "1",
                        "cxx_T": "int",
                        "cxx_addr": "",
                        "cxx_alloc_decl": "std::vector<int> * SHCXX_rv",
                        "cxx_member": "->",
                        "cxx_type": "std::vector<int>",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "npy_dims": "SHD_rv",
                        "npy_intp": "npy_intp SHD_rv[1];\n",
                        "npy_ndims": "1",
                        "numpy_type": "NPY_INT",
                        "py_capsule": "SHC_SHCXX_rv",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_vector_result_numpy",
                        "stmt1": "py_vector_result_numpy"
                    }
                },
                "ast": {
                    "attrs": {
                        "dimension": ":"
                    },
                    "declarator": {
                        "name": "ReturnVectorAlloc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "n",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "std::vector"
                    ],
                    "template_arguments": [
                        {
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "typemap_name": "std::vector"
                },
                "decl": "std::vector<int> ReturnVectorAlloc(int n)",
                "declgen": "std::vector<int> ReturnVectorAlloc(int n +intent(in)+value) +dimension(:)",
                "doxygen": {
                    "__line__": 156,
                    "description": "Implement iota function.\nReturn a vector as an ALLOCATABLE array.\nCopy results into the new array.\n"
                },
                "fmtdict": {
                    "PY_name_impl": "PY_ReturnVectorAlloc",
                    "function_name": "ReturnVectorAlloc",
                    "underscore_name": "return_vector_alloc"
                },
                "linenumber": 155,
                "options": {
                    "wrap_c": false
                }
            }
        ],
        "language": "cxx",
        "options": {
            "C_API_case": "native",
            "C_enum_member_template": "{C_prefix}{C_name_scope}{enum_member_name}",
            "C_enum_template": "{C_prefix}{C_name_scope}{enum_name}",
            "C_header_filename_class_template": "wrap{file_scope}.{C_header_filename_suffix}",
            "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}",
            "C_header_filename_namespace_template": "wrap{file_scope}.{C_header_filename_suffix}",
            "C_header_utility_template": "types{library}.{C_header_filename_suffix}",
            "C_impl_filename_class_template": "wrap{file_scope}.{C_impl_filename_suffix}",
            "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}",
            "C_impl_filename_namespace_template": "wrap{file_scope}.{C_impl_filename_suffix}",
            "C_line_length": 72,
            "C_memory_dtor_function_template": "{C_prefix}SHROUD_memory_destructor",
            "C_name_template": "{C_prefix}{C_name_scope}{underscore_name}{function_suffix}{template_suffix}",
            "C_var_capsule_template": "C{c_var}",
            "C_var_context_template": "D{c_var}",
            "C_var_len_template": "N{c_var}",
            "C_var_size_template": "S{c_var}",
            "C_var_trim_template": "L{c_var}",
            "F_C_name_template": "{F_C_prefix}{F_name_scope}{underscore_name}{function_suffix}{template_suffix}",
            "F_abstract_interface_argument_template": "arg{index}",
            "F_abstract_interface_subprogram_template": "{underscore_name}_{argname}",
            "F_auto_reference_count": false,
            "F_capsule_data_type_class_template": "SHROUD_{F_name_scope}capsule",
            "F_create_bufferify_function": true,
            "F_create_generic": true,
            "F_enum_member_template": "{F_name_scope}{enum_member_lower}",
            "F_flatten_namespace": false,
            "F_force_wrapper": false,
            "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}",
            "F_impl_filename_namespace_template": "wrapf{file_scope}.{F_filename_suffix}",
            "F_line_length": 72,
            "F_module_name_library_template": "{library_lower}_mod",
            "F_module_name_namespace_template": "{file_scope}_mod",
            "F_name_function_template": "{underscore_name}{function_suffix}{template_suffix}",
            "F_name_generic_template": "{underscore_name}",
            "F_name_impl_template": "{F_name_scope}{underscore_name}{function_suffix}{template_suffix}",
            "F_return_fortran_pointer": true,
            "F_standard": 2003,
            "F_string_len_trim": true,
            "LUA_class_reg_template": "{LUA_prefix}{cxx_class}_Reg",
            "LUA_ctor_name_template": "{cxx_class}",
            "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}",
            "LUA_metadata_template": "{cxx_class}.metatable",
            "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}",
            "LUA_module_name_template": "{library_lower}",
            "LUA_module_reg_template": "{LUA_prefix}{library}_Reg",
            "LUA_name_impl_template": "{LUA_prefix}{C_name_scope}{underscore_name}",
            "LUA_name_template": "{function_name}",
            "LUA_userdata_member_template": "self",
            "LUA_userdata_type_template": "{LUA_prefix}{cxx_class}_Type",
            "PY_PyObject_template": "{PY_prefix}{cxx_class}",
            "PY_PyTypeObject_template": "{PY_prefix}{cxx_class}_Type",
            "PY_array_arg": "numpy",
            "PY_capsule_destructor_function_template": "{PY_prefix}SHROUD_capsule_destructor",
            "PY_dtor_context_array_template": "{PY_prefix}SHROUD_capsule_context",
            "PY_dtor_context_typedef_template": "{PY_prefix}SHROUD_dtor_context",
            "PY_fetch_context_function_template": "{PY_prefix}SHROUD_fetch_context",
            "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}",
            "PY_member_getter_template": "{PY_prefix}{cxx_class}_{variable_name}_getter",
            "PY_member_setter_template": "{PY_prefix}{cxx_class}_{variable_name}_setter",
            "PY_module_filename_template": "py{file_scope}module.{PY_impl_filename_suffix}",
            "PY_name_impl_template": "{PY_prefix}{function_name}{function_suffix}{template_suffix}",
            "PY_numpy_array_capsule_name_template": "{PY_prefix}array_dtor",
            "PY_release_memory_function_template": "{PY_prefix}SHROUD_release_memory",
            "PY_struct_arg": "numpy",
            "PY_struct_array_descr_create_template": "{PY_prefix}{cxx_class}_create_array_descr",
            "PY_struct_array_descr_name_template": "{cxx_class}_dtype",
            "PY_struct_array_descr_variable_template": "{PY_prefix}{cxx_class}_array_descr",
            "PY_type_filename_template": "py{file_scope}type.{PY_impl_filename_suffix}",
            "PY_type_impl_template": "{PY_prefix}{cxx_class}_{PY_type_method}{function_suffix}{template_suffix}",
            "PY_utility_filename_template": "py{library}util.{PY_impl_filename_suffix}",
            "YAML_type_filename_template": "{library_lower}_types.yaml",
            "__line__": 14,
            "debug": true,
            "debug_index": false,
            "doxygen": true,
            "flatten_namespace": false,
            "literalinclude": false,
            "literalinclude2": true,
            "return_scalar_pointer": "pointer",
            "show_splicer_comments": true,
            "wrap_c": false,
            "wrap_fortran": false,
            "wrap_lua": false,
            "wrap_python": true
        },
        "scope_file": [
            "vectors"
        ]
    }
}