{
    "__NOTICE__": "This file is generated by Shroud and is useful for debugging.",
    "library": {
        "classes": [
            {
                "as_struct": true,
                "cxx_header": [],
                "fmtdict": {
                    "C_header_filename": "wraparray_info.h",
                    "C_impl_filename": "wraparray_info.c",
                    "C_name_scope": "array_info_",
                    "C_type_name": "array_info",
                    "F_capsule_data_type": "SHROUD_array_info_capsule",
                    "F_derived_name": "array_info",
                    "F_name_scope": "array_info_",
                    "PY_struct_array_descr_create": "PY_array_info_create_array_descr",
                    "PY_struct_array_descr_name": "array_info_dtype",
                    "PY_struct_array_descr_variable": "PY_array_info_array_descr",
                    "class_scope": "array_info::",
                    "cxx_class": "array_info",
                    "cxx_type": "array_info",
                    "file_scope": "array_info"
                },
                "linenumber": 39,
                "name": "array_info",
                "options": {
                    "__line__": 46,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "scope": "array_info::",
                "typemap_name": "array_info",
                "variables": [
                    {
                        "ast": {
                            "declarator": {
                                "name": "tc",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "fmtdict": {
                            "field_name": "tc",
                            "variable_lower": "tc",
                            "variable_name": "tc",
                            "variable_upper": "TC"
                        },
                        "linenumber": "?",
                        "name": "tc",
                        "options": {}
                    }
                ]
            }
        ],
        "copyright": [
            "Copyright (c) 2017-2020, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "clibrary.h"
        ],
        "fmtdict": {
            "CXX_local": "SHCXX_",
            "CXX_template": "",
            "CXX_this": "SH_this",
            "CXX_this_call": "",
            "C_array_type": "CLI_SHROUD_array",
            "C_bufferify_suffix": "_bufferify",
            "C_call_list": "",
            "C_capsule_data_type": "CLI_SHROUD_capsule_data",
            "C_custom_return_type": "",
            "C_header_filename": "wrapClibrary.h",
            "C_header_filename_suffix": "h",
            "C_header_utility": "typesClibrary.h",
            "C_impl_filename": "wrapClibrary.c",
            "C_impl_filename_suffix": "c",
            "C_local": "SHC_",
            "C_memory_dtor_function": "CLI_SHROUD_memory_destructor",
            "C_name_scope": "",
            "C_post_call": "",
            "C_pre_call": "",
            "C_prefix": "CLI_",
            "C_result": "rv",
            "C_string_result_as_arg": "SHF_rv",
            "C_this": "self",
            "F_C_prefix": "c_",
            "F_C_pure_clause": "",
            "F_C_result_clause": "",
            "F_arg_c_call": "",
            "F_array_type": "SHROUD_array",
            "F_capsule_data_type": "SHROUD_capsule_data",
            "F_capsule_final_function": "SHROUD_capsule_final",
            "F_capsule_type": "SHROUD_capsule",
            "F_derived_member": "cxxmem",
            "F_filename_suffix": "f",
            "F_impl_filename": "wrapfclibrary.f",
            "F_module_name": "clibrary_mod",
            "F_name_assign": "assign",
            "F_name_associated": "associated",
            "F_name_final": "final",
            "F_name_instance_get": "get_instance",
            "F_name_instance_set": "set_instance",
            "F_name_scope": "",
            "F_pointer": "SHT_ptr",
            "F_pure_clause": "",
            "F_result": "SHT_rv",
            "F_result_capsule": "SHT_crv",
            "F_result_clause": "",
            "F_result_ptr": "SHT_prv",
            "F_string_result_as_arg": "",
            "F_this": "obj",
            "LUA_header_filename_suffix": "h",
            "LUA_impl_filename_suffix": "c",
            "LUA_prefix": "l_",
            "LUA_result": "rv",
            "LUA_state_var": "L",
            "LUA_this_call": "",
            "PY_PyObject": "PyObject",
            "PY_capsule_destructor_function": "PY_SHROUD_capsule_destructor",
            "PY_dtor_context_array": "PY_SHROUD_capsule_context",
            "PY_dtor_context_typedef": "PY_SHROUD_dtor_context",
            "PY_extern_C_begin": "",
            "PY_fetch_context_function": "PY_SHROUD_fetch_context",
            "PY_header_filename": "pyClibrarymodule.h",
            "PY_header_filename_suffix": "h",
            "PY_impl_filename_suffix": "c",
            "PY_library_doc": "library documentation",
            "PY_module_filename": "pyClibrarymodule.c",
            "PY_module_init": "clibrary",
            "PY_module_name": "clibrary",
            "PY_module_scope": "clibrary",
            "PY_numpy_array_capsule_name": "PY_array_dtor",
            "PY_param_args": "args",
            "PY_param_kwds": "kwds",
            "PY_param_self": "self",
            "PY_prefix": "PY_",
            "PY_release_memory_function": "PY_SHROUD_release_memory",
            "PY_result": "SHTPy_rv",
            "PY_this_call": "",
            "PY_type_dtor": "idtor",
            "PY_type_obj": "obj",
            "PY_used_param_args": false,
            "PY_used_param_kwds": false,
            "PY_used_param_self": false,
            "PY_utility_filename": "pyClibraryutil.c",
            "PyObject": "PyObject",
            "YAML_type_filename": "clibrary_types.yaml",
            "c_temp": "SHT_",
            "capsule_order": "0",
            "cast1": ") ",
            "cast2": "",
            "cast_const": "(",
            "cast_reinterpret": "(",
            "cast_static": "(",
            "class_scope": "",
            "cxx_class": "",
            "f_pointer_shape": "",
            "f_var_shape": "",
            "file_scope": "Clibrary",
            "function_suffix": "",
            "library": "Clibrary",
            "library_lower": "clibrary",
            "library_upper": "CLIBRARY",
            "namespace_scope": "",
            "npy_dims": "NULL",
            "npy_intp": "",
            "npy_ndims": "0",
            "stdlib": "",
            "template_suffix": "",
            "void_proto": "void"
        },
        "functions": [
            {
                "ast": {
                    "declarator": {
                        "name": "NoReturnNoArguments",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void NoReturnNoArguments()",
                "declgen": "void NoReturnNoArguments()",
                "fmtdict": {
                    "C_name": "NoReturnNoArguments",
                    "C_prototype": "",
                    "C_return_type": "void",
                    "F_C_call": "c_no_return_no_arguments",
                    "F_C_name": "no_return_no_arguments",
                    "F_arguments": "",
                    "F_name_function": "no_return_no_arguments",
                    "F_name_generic": "no_return_no_arguments",
                    "F_name_impl": "no_return_no_arguments",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_NoReturnNoArguments",
                    "c_const": "",
                    "function_name": "NoReturnNoArguments",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "no_return_no_arguments"
                },
                "linenumber": 50,
                "options": {
                    "__line__": 51,
                    "literalinclude": true
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&arg1",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "arg1",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "double arg1",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "double arg1",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&arg2",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg2",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg2",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arg2",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_decl": "int arg2",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "double",
                        "f_type": "real(C_DOUBLE)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "double",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_DOUBLE",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "PassByValue",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double PassByValue(double arg1, int arg2)",
                "declgen": "double PassByValue(double arg1 +intent(in)+value, int arg2 +intent(in)+value)",
                "fmtdict": {
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "PassByValue",
                    "C_prototype": "double arg1,\t int arg2",
                    "C_return_type": "double",
                    "F_C_call": "c_pass_by_value",
                    "F_C_name": "pass_by_value",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_function": "pass_by_value",
                    "F_name_generic": "pass_by_value",
                    "F_name_impl": "pass_by_value",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_PassByValue",
                    "c_const": "",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "PassByValue",
                    "underscore_name": "pass_by_value"
                },
                "linenumber": 53,
                "options": {
                    "__line__": 54,
                    "literalinclude": true
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg1",
                            "cxx_member": "->",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_native_pointer_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "arg1",
                            "stmt0": "f_native_pointer_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_pointer_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "double arg1",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg1",
                            "cxx_addr": "",
                            "cxx_decl": "double arg1",
                            "cxx_member": "->",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg2",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg2",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_pointer_out_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg2",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg2",
                            "stmt0": "f_native_pointer_out_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_pointer_out_",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arg2",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg2",
                            "cxx_addr": "",
                            "cxx_decl": "int arg2",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt0": "py_native_out",
                            "stmt1": "py_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "PassByReference",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void PassByReference(double *arg1+intent(in), int *arg2+intent(out))",
                "declgen": "void PassByReference(double * arg1 +intent(in), int * arg2 +intent(out))",
                "fmtdict": {
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "PassByReference",
                    "C_prototype": "double * arg1,\t int * arg2",
                    "C_return_type": "void",
                    "F_C_call": "c_pass_by_reference",
                    "F_C_name": "pass_by_reference",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_function": "pass_by_reference",
                    "F_name_generic": "pass_by_reference",
                    "F_name_impl": "pass_by_reference",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_PassByReference",
                    "c_const": "",
                    "function_name": "PassByReference",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "pass_by_reference"
                },
                "linenumber": 56,
                "options": {
                    "__line__": 57,
                    "literalinclude": true
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "const ",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&arg1",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt0": "c_bool_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "SH_arg1",
                            "f_type": "logical",
                            "f_var": "arg1",
                            "stmt0": "f_bool_scalar_in_",
                            "stmt1": "f_bool_in",
                            "stmtc0": "c_bool_scalar_in_",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "c_const": "const ",
                            "c_decl": "bool arg1",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "bool arg1",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_BOOL",
                            "py_type": "PyObject",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_bool_in",
                            "stmt1": "py_bool_in"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg2",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg2",
                            "cxx_member": "->",
                            "cxx_type": "bool",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt0": "c_bool_pointer_out_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "SH_arg2",
                            "f_type": "logical",
                            "f_var": "arg2",
                            "stmt0": "f_bool_pointer_out_",
                            "stmt1": "f_bool_out",
                            "stmtc0": "c_bool_pointer_out_",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "c_const": "",
                            "c_decl": "bool arg2",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "arg2",
                            "cxx_addr": "",
                            "cxx_decl": "bool arg2",
                            "cxx_member": "->",
                            "cxx_type": "bool",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_BOOL",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt0": "py_bool_out",
                            "stmt1": "py_bool_out"
                        }
                    },
                    "arg3": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg3",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg3",
                            "cxx_member": "->",
                            "cxx_type": "bool",
                            "cxx_var": "arg3",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt0": "c_bool_pointer_inout_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "SH_arg3",
                            "f_type": "logical",
                            "f_var": "arg3",
                            "stmt0": "f_bool_pointer_inout_",
                            "stmt1": "f_bool_inout",
                            "stmtc0": "c_bool_pointer_inout_",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "c_const": "",
                            "c_decl": "bool arg3",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "arg3",
                            "cxx_addr": "",
                            "cxx_decl": "bool arg3",
                            "cxx_member": "->",
                            "cxx_type": "bool",
                            "cxx_var": "arg3",
                            "data_var": "SHData_arg3",
                            "numpy_type": "NPY_BOOL",
                            "py_type": "PyObject",
                            "py_var": "SHPy_arg3",
                            "size_var": "SHSize_arg3",
                            "stmt0": "py_bool_inout",
                            "stmt1": "py_bool_inout"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "checkBool",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        },
                        {
                            "attrs": {
                                "intent": "inout",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg3",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void checkBool(const bool arg1, bool *arg2+intent(out), bool *arg3+intent(inout))",
                "declgen": "void checkBool(const bool arg1 +intent(in)+value, bool * arg2 +intent(out), bool * arg3 +intent(inout))",
                "doxygen": {
                    "__line__": 61,
                    "brief": "Check intent with bool"
                },
                "fmtdict": {
                    "C_call_list": "arg1,\t arg2,\t arg3",
                    "C_name": "checkBool",
                    "C_prototype": "const bool arg1,\t bool * arg2,\t bool * arg3",
                    "C_return_type": "void",
                    "F_C_call": "c_check_bool",
                    "F_C_name": "c_check_bool",
                    "F_arg_c_call": "SH_arg1,\t SH_arg2,\t SH_arg3",
                    "F_arguments": "arg1,\t arg2,\t arg3",
                    "F_name_function": "check_bool",
                    "F_name_generic": "check_bool",
                    "F_name_impl": "check_bool",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_checkBool",
                    "c_const": "",
                    "function_name": "checkBool",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "check_bool"
                },
                "linenumber": 60,
                "options": {
                    "__line__": 63,
                    "literalinclude": true
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg1",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_in_",
                            "stmt1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_char_in",
                            "stmt1": "py_char_in"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg2",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg2",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_in_",
                            "stmt1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "arg2",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": null,
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt0": "py_char_in",
                            "stmt1": "py_char_in"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "char",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_char_pointer_result_",
                        "stmt1": "c_char_result"
                    },
                    "fmtf": {
                        "cxx_type": "char",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_char_scalar_result_result_as_arg",
                        "stmt1": "f_default",
                        "stmtc0": "c_char_scalar_result_buf",
                        "stmtc1": "c_char_result_buf"
                    },
                    "fmtpy": {
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "char",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_char_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result_as_arg",
                        "len": "30"
                    },
                    "declarator": {
                        "name": "Function4a",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg2",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "return_pointer_as": "result_as_arg",
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "char *Function4a( const char *arg1, const char *arg2 ) +len(30)",
                "declgen": "char * Function4a(const char * arg1 +intent(in), const char * arg2 +intent(in)) +deref(result_as_arg)+len(30)",
                "fmtdict": {
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "Function4a",
                    "C_prototype": "const char * arg1,\t const char * arg2",
                    "C_return_type": "char *",
                    "F_C_call": "c_function4a_bufferify",
                    "F_C_name": "c_function4a",
                    "F_arg_c_call": "trim(arg1)//C_NULL_CHAR,\t trim(arg2)//C_NULL_CHAR,\t SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_function": "function4a",
                    "F_name_generic": "function4a",
                    "F_name_impl": "function4a",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_Function4a",
                    "c_const": "",
                    "cxx_rv_decl": "char * SHC_rv",
                    "function_name": "Function4a",
                    "underscore_name": "function4a"
                },
                "linenumber": 66,
                "options": {}
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_len": "NSHF_rv",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "SHC_rv",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_result_buf_",
                            "stmt1": "c_char_result_buf"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "f_type": "character(*)",
                            "f_var": "SHT_rv",
                            "stmt0": "f_char_pointer_result_",
                            "stmt1": "f_default",
                            "stmtc0": "c_char_pointer_result_buf_",
                            "stmtc1": "c_char_result_buf"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg1",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_var": "arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg2",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg2",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg2",
                            "f_var": "arg2"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "void",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": "30"
                    },
                    "declarator": {
                        "name": "Function4a",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg2",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "_is_result": true,
                                "intent": "out",
                                "len": "NSHF_rv"
                            },
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "char *Function4a( const char *arg1, const char *arg2 ) +len(30)",
                "declgen": "void Function4a(const char * arg1 +intent(in), const char * arg2 +intent(in), char * SHF_rv +intent(out)+len(NSHF_rv)) +len(30)",
                "fmtdict": {
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "CLI_function4a_bufferify",
                    "C_prototype": "const char * arg1,\t const char * arg2,\t char * SHF_rv,\t int NSHF_rv",
                    "C_return_type": "void",
                    "F_C_name": "c_function4a_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "char * SHC_rv",
                    "function_name": "Function4a",
                    "function_suffix": "_bufferify",
                    "underscore_name": "function4a"
                },
                "linenumber": 66,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "name",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "name",
                            "f_var": "name"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "name",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "data_var": "SHData_name",
                            "numpy_type": null,
                            "py_var": "SHPy_name",
                            "size_var": "SHSize_name",
                            "stmt0": "py_char_in",
                            "stmt1": "py_char_in"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "acceptName",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptName(const char *name)",
                "declgen": "void acceptName(const char * name +intent(in))",
                "fmtdict": {
                    "C_call_list": "name",
                    "C_name": "acceptName",
                    "C_prototype": "const char * name",
                    "C_return_type": "void",
                    "F_C_call": "c_accept_name",
                    "F_C_name": "c_accept_name",
                    "F_arg_c_call": "trim(name)//C_NULL_CHAR",
                    "F_arguments": "name",
                    "F_name_function": "accept_name",
                    "F_name_generic": "accept_name",
                    "F_name_impl": "accept_name",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_acceptName",
                    "c_const": "",
                    "function_name": "acceptName",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "accept_name"
                },
                "linenumber": 70,
                "options": {
                    "__line__": 71,
                    "literalinclude": true
                }
            },
            {
                "_fmtargs": {
                    "s": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "s",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "s",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "s",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_inout_",
                            "stmt1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "s",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "s",
                            "data_var": "SHData_s",
                            "numpy_type": null,
                            "py_var": "SHPy_s",
                            "size_var": "SHSize_s",
                            "stmt0": "py_char_inout",
                            "stmt1": "py_char_inout"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "passCharPtrInOut",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "inout",
                                "value": false
                            },
                            "declarator": {
                                "name": "s",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passCharPtrInOut(char * s+intent(inout))",
                "declgen": "void passCharPtrInOut(char * s +intent(inout))",
                "doxygen": {
                    "__line__": 78,
                    "brief": "toupper",
                    "description": "Change a string in-place.\nFor Python, return a new string since strings are immutable.\n"
                },
                "fmtdict": {
                    "C_call_list": "s",
                    "C_name": "passCharPtrInOut",
                    "C_prototype": "char * s",
                    "C_return_type": "void",
                    "F_C_call": "c_pass_char_ptr_in_out_bufferify",
                    "F_C_name": "c_pass_char_ptr_in_out",
                    "F_arg_c_call": "s,\t len_trim(s, kind=C_INT),\t len(s, kind=C_INT)",
                    "F_arguments": "s",
                    "F_name_function": "pass_char_ptr_in_out",
                    "F_name_generic": "pass_char_ptr_in_out",
                    "F_name_impl": "pass_char_ptr_in_out",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_passCharPtrInOut",
                    "c_const": "",
                    "function_name": "passCharPtrInOut",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "pass_char_ptr_in_out"
                },
                "linenumber": 77,
                "options": {}
            },
            {
                "_fmtargs": {
                    "s": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "s",
                            "c_var_len": "Ns",
                            "c_var_trim": "Ls",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "SHCXX_s",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "SHCXX_s",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_inout_buf",
                            "stmt1": "c_char_inout_buf"
                        },
                        "fmtf": {
                            "c_var": "s",
                            "f_type": "character(*)",
                            "f_var": "s",
                            "stmt0": "f_char_pointer_inout_",
                            "stmt1": "f_default",
                            "stmtc0": "c_char_pointer_inout_buf",
                            "stmtc1": "c_char_inout_buf"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "passCharPtrInOut",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "inout",
                                "len": "Ns",
                                "len_trim": "Ls",
                                "value": false
                            },
                            "declarator": {
                                "name": "s",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passCharPtrInOut(char * s+intent(inout))",
                "declgen": "void passCharPtrInOut(char * s +intent(inout)+len(Ns)+len_trim(Ls))",
                "doxygen": {
                    "__line__": 78,
                    "brief": "toupper",
                    "description": "Change a string in-place.\nFor Python, return a new string since strings are immutable.\n"
                },
                "fmtdict": {
                    "C_call_list": "SHCXX_s",
                    "C_name": "CLI_pass_char_ptr_in_out_bufferify",
                    "C_prototype": "char * s,\t int Ls,\t int Ns",
                    "C_return_type": "void",
                    "F_C_name": "c_pass_char_ptr_in_out_bufferify",
                    "c_const": "",
                    "function_name": "passCharPtrInOut",
                    "function_suffix": "_bufferify",
                    "underscore_name": "pass_char_ptr_in_out"
                },
                "linenumber": 77,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "name1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "name1",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_out_",
                            "stmt1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "name1",
                            "charlen": "MAXNAME",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name1",
                            "data_var": "SHData_name1",
                            "numpy_type": null,
                            "py_var": "SHPy_name1",
                            "size_var": "SHSize_name1",
                            "stmt0": "py_char_out_charlen",
                            "stmt1": "py_char_out_charlen"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "returnOneName",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "charlen": "MAXNAME",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "name1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void returnOneName(char *name1+intent(out)+charlen(MAXNAME))",
                "declgen": "void returnOneName(char * name1 +charlen(MAXNAME)+intent(out))",
                "doxygen": {
                    "__line__": 90,
                    "brief": "Test charlen attribute",
                    "description": "Each argument is assumed to be at least MAXNAME long.\nThis define is provided by the user.\nThe function will copy into the user provided buffer.\n"
                },
                "fmtdict": {
                    "C_call_list": "name1",
                    "C_name": "returnOneName",
                    "C_prototype": "char * name1",
                    "C_return_type": "void",
                    "F_C_call": "c_return_one_name_bufferify",
                    "F_C_name": "c_return_one_name",
                    "F_arg_c_call": "name1,\t len(name1, kind=C_INT)",
                    "F_arguments": "name1",
                    "F_name_function": "return_one_name",
                    "F_name_generic": "return_one_name",
                    "F_name_impl": "return_one_name",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_returnOneName",
                    "c_const": "",
                    "function_name": "returnOneName",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "return_one_name"
                },
                "linenumber": 89,
                "options": {
                    "__line__": 96,
                    "literalinclude": true
                }
            },
            {
                "_fmtargs": {
                    "name1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name1",
                            "c_var_len": "Nname1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "name1",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_out_buf",
                            "stmt1": "c_char_out_buf"
                        },
                        "fmtf": {
                            "c_var": "name1",
                            "f_type": "character(*)",
                            "f_var": "name1",
                            "stmt0": "f_char_pointer_out_",
                            "stmt1": "f_default",
                            "stmtc0": "c_char_pointer_out_buf",
                            "stmtc1": "c_char_out_buf"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "returnOneName",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "charlen": "MAXNAME",
                                "intent": "out",
                                "len": "Nname1",
                                "value": false
                            },
                            "declarator": {
                                "name": "name1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void returnOneName(char *name1+intent(out)+charlen(MAXNAME))",
                "declgen": "void returnOneName(char * name1 +charlen(MAXNAME)+intent(out)+len(Nname1))",
                "doxygen": {
                    "__line__": 90,
                    "brief": "Test charlen attribute",
                    "description": "Each argument is assumed to be at least MAXNAME long.\nThis define is provided by the user.\nThe function will copy into the user provided buffer.\n"
                },
                "fmtdict": {
                    "C_call_list": "name1",
                    "C_name": "CLI_return_one_name_bufferify",
                    "C_prototype": "char * name1,\t int Nname1",
                    "C_return_type": "void",
                    "F_C_name": "c_return_one_name_bufferify",
                    "c_const": "",
                    "function_name": "returnOneName",
                    "function_suffix": "_bufferify",
                    "underscore_name": "return_one_name"
                },
                "linenumber": 89,
                "options": {
                    "__line__": 96,
                    "literalinclude": true,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "name1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "name1",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_out_",
                            "stmt1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "name1",
                            "charlen": "MAXNAME",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name1",
                            "data_var": "SHData_name1",
                            "numpy_type": null,
                            "py_var": "SHPy_name1",
                            "size_var": "SHSize_name1",
                            "stmt0": "py_char_out_charlen",
                            "stmt1": "py_char_out_charlen"
                        }
                    },
                    "name2": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name2",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "name2",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_out_",
                            "stmt1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "name2",
                            "charlen": "MAXNAME",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name2",
                            "data_var": "SHData_name2",
                            "numpy_type": null,
                            "py_var": "SHPy_name2",
                            "size_var": "SHSize_name2",
                            "stmt0": "py_char_out_charlen",
                            "stmt1": "py_char_out_charlen"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "returnTwoNames",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "charlen": "MAXNAME",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "name1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "charlen": "MAXNAME",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "name2",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void returnTwoNames(char *name1+intent(out)+charlen(MAXNAME), char *name2+intent(out)+charlen(MAXNAME))",
                "declgen": "void returnTwoNames(char * name1 +charlen(MAXNAME)+intent(out), char * name2 +charlen(MAXNAME)+intent(out))",
                "doxygen": {
                    "__line__": 101,
                    "brief": "Test charlen attribute",
                    "description": "Each argument is assumed to be at least MAXNAME long.\nThis define is provided by the user.\nThe function will copy into the user provided buffer.\n"
                },
                "fmtdict": {
                    "C_call_list": "name1,\t name2",
                    "C_name": "returnTwoNames",
                    "C_prototype": "char * name1,\t char * name2",
                    "C_return_type": "void",
                    "F_C_call": "c_return_two_names_bufferify",
                    "F_C_name": "c_return_two_names",
                    "F_arg_c_call": "name1,\t len(name1, kind=C_INT),\t name2,\t len(name2, kind=C_INT)",
                    "F_arguments": "name1,\t name2",
                    "F_name_function": "return_two_names",
                    "F_name_generic": "return_two_names",
                    "F_name_impl": "return_two_names",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_returnTwoNames",
                    "c_const": "",
                    "function_name": "returnTwoNames",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "return_two_names"
                },
                "linenumber": 99,
                "options": {}
            },
            {
                "_fmtargs": {
                    "name1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name1",
                            "c_var_len": "Nname1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "name1",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_out_buf",
                            "stmt1": "c_char_out_buf"
                        },
                        "fmtf": {
                            "c_var": "name1",
                            "f_type": "character(*)",
                            "f_var": "name1",
                            "stmt0": "f_char_pointer_out_",
                            "stmt1": "f_default",
                            "stmtc0": "c_char_pointer_out_buf",
                            "stmtc1": "c_char_out_buf"
                        }
                    },
                    "name2": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name2",
                            "c_var_len": "Nname2",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "name2",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_out_buf",
                            "stmt1": "c_char_out_buf"
                        },
                        "fmtf": {
                            "c_var": "name2",
                            "f_type": "character(*)",
                            "f_var": "name2",
                            "stmt0": "f_char_pointer_out_",
                            "stmt1": "f_default",
                            "stmtc0": "c_char_pointer_out_buf",
                            "stmtc1": "c_char_out_buf"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "returnTwoNames",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "charlen": "MAXNAME",
                                "intent": "out",
                                "len": "Nname1",
                                "value": false
                            },
                            "declarator": {
                                "name": "name1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "charlen": "MAXNAME",
                                "intent": "out",
                                "len": "Nname2",
                                "value": false
                            },
                            "declarator": {
                                "name": "name2",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void returnTwoNames(char *name1+intent(out)+charlen(MAXNAME), char *name2+intent(out)+charlen(MAXNAME))",
                "declgen": "void returnTwoNames(char * name1 +charlen(MAXNAME)+intent(out)+len(Nname1), char * name2 +charlen(MAXNAME)+intent(out)+len(Nname2))",
                "doxygen": {
                    "__line__": 101,
                    "brief": "Test charlen attribute",
                    "description": "Each argument is assumed to be at least MAXNAME long.\nThis define is provided by the user.\nThe function will copy into the user provided buffer.\n"
                },
                "fmtdict": {
                    "C_call_list": "name1,\t name2",
                    "C_name": "CLI_return_two_names_bufferify",
                    "C_prototype": "char * name1,\t int Nname1,\t char * name2,\t int Nname2",
                    "C_return_type": "void",
                    "F_C_name": "c_return_two_names_bufferify",
                    "c_const": "",
                    "function_name": "returnTwoNames",
                    "function_suffix": "_bufferify",
                    "underscore_name": "return_two_names"
                },
                "linenumber": 99,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "ltext": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "ltext",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&ltext",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int ltext",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "ltext",
                            "cxx_addr": "&",
                            "cxx_decl": "int ltext",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "data_var": "SHData_ltext",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "MAXNAME",
                            "py_var": "SHPy_ltext",
                            "size_var": "SHSize_ltext"
                        }
                    },
                    "text": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "text",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "text",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_out_",
                            "stmt1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "text",
                            "charlen": "MAXNAME",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "data_var": "SHData_text",
                            "numpy_type": null,
                            "py_var": "SHPy_text",
                            "size_var": "SHSize_text",
                            "stmt0": "py_char_out_charlen",
                            "stmt1": "py_char_out_charlen"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "ImpliedTextLen",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "charlen": "MAXNAME",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "text",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "implied": "len(text)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "ltext",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void ImpliedTextLen(char *text+intent(out)+charlen(MAXNAME), int ltext+implied(len(text)))",
                "declgen": "void ImpliedTextLen(char * text +charlen(MAXNAME)+intent(out), int ltext +implied(len(text))+intent(in)+value)",
                "doxygen": {
                    "__line__": 111,
                    "brief": "Fill text, at most ltext characters."
                },
                "fmtdict": {
                    "C_call_list": "text,\t ltext",
                    "C_name": "ImpliedTextLen",
                    "C_prototype": "char * text,\t int ltext",
                    "C_return_type": "void",
                    "F_C_call": "c_implied_text_len_bufferify",
                    "F_C_name": "c_implied_text_len",
                    "F_arg_c_call": "text,\t len(text, kind=C_INT),\t SH_ltext",
                    "F_arguments": "text",
                    "F_name_function": "implied_text_len",
                    "F_name_generic": "implied_text_len",
                    "F_name_impl": "implied_text_len",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_ImpliedTextLen",
                    "c_const": "",
                    "function_name": "ImpliedTextLen",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "implied_text_len"
                },
                "linenumber": 109,
                "options": {
                    "__line__": 113,
                    "literalinclude": true
                }
            },
            {
                "_fmtargs": {
                    "ltext": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "ltext",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&ltext",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_buf",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "SH_ltext",
                            "f_var": "ltext",
                            "pre_call_intent": "len(text,kind=C_INT)"
                        }
                    },
                    "text": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "text",
                            "c_var_len": "Ntext",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "text",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_out_buf",
                            "stmt1": "c_char_out_buf"
                        },
                        "fmtf": {
                            "c_var": "text",
                            "f_type": "character(*)",
                            "f_var": "text",
                            "stmt0": "f_char_pointer_out_",
                            "stmt1": "f_default",
                            "stmtc0": "c_char_pointer_out_buf",
                            "stmtc1": "c_char_out_buf"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "ImpliedTextLen",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "charlen": "MAXNAME",
                                "intent": "out",
                                "len": "Ntext",
                                "value": false
                            },
                            "declarator": {
                                "name": "text",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "implied": "len(text)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "ltext",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void ImpliedTextLen(char *text+intent(out)+charlen(MAXNAME), int ltext+implied(len(text)))",
                "declgen": "void ImpliedTextLen(char * text +charlen(MAXNAME)+intent(out)+len(Ntext), int ltext +implied(len(text))+intent(in)+value)",
                "doxygen": {
                    "__line__": 111,
                    "brief": "Fill text, at most ltext characters."
                },
                "fmtdict": {
                    "C_call_list": "text,\t ltext",
                    "C_name": "CLI_implied_text_len_bufferify",
                    "C_prototype": "char * text,\t int Ntext,\t int ltext",
                    "C_return_type": "void",
                    "F_C_name": "c_implied_text_len_bufferify",
                    "c_const": "",
                    "function_name": "ImpliedTextLen",
                    "function_suffix": "_bufferify",
                    "underscore_name": "implied_text_len"
                },
                "linenumber": 109,
                "options": {
                    "__line__": 113,
                    "literalinclude": true,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "flag": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "flag",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&flag",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt0": "c_bool_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "SH_flag",
                            "f_var": "flag",
                            "pre_call_intent": ".FALSE._C_BOOL"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "c_const": "",
                            "c_decl": "bool flag",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "flag",
                            "cxx_addr": "&",
                            "cxx_decl": "bool flag",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "data_var": "SHData_flag",
                            "numpy_type": "NPY_BOOL",
                            "pre_call_intent": "false",
                            "py_var": "SHPy_flag",
                            "size_var": "SHSize_flag"
                        }
                    },
                    "ltext": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "ltext",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&ltext",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "SH_ltext",
                            "f_var": "ltext",
                            "pre_call_intent": "len(text,kind=C_INT)"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int ltext",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "ltext",
                            "cxx_addr": "&",
                            "cxx_decl": "int ltext",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "data_var": "SHData_ltext",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "strlen(text)",
                            "py_var": "SHPy_ltext",
                            "size_var": "SHSize_ltext"
                        }
                    },
                    "text": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "text",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "text",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "text",
                            "f_var": "text"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "text",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "data_var": "SHData_text",
                            "numpy_type": null,
                            "py_var": "SHPy_text",
                            "size_var": "SHSize_text",
                            "stmt0": "py_char_in",
                            "stmt1": "py_char_in"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "ImpliedLen",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "text",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "implied": "len(text)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "ltext",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "false",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "flag",
                                "pointer": []
                            },
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int ImpliedLen(const char *text, int ltext+implied(len(text)), bool flag+implied(false))",
                "declgen": "int ImpliedLen(const char * text +intent(in), int ltext +implied(len(text))+intent(in)+value, bool flag +implied(false)+intent(in)+value)",
                "doxygen": {
                    "__line__": 120,
                    "brief": "Return the implied argument - text length",
                    "description": "Pass the Fortran length of the char argument directy to the C function.\nNo need for the bufferify version which will needlessly copy the string.\n"
                },
                "fmtdict": {
                    "C_call_list": "text,\t ltext,\t flag",
                    "C_name": "ImpliedLen",
                    "C_prototype": "const char * text,\t int ltext,\t bool flag",
                    "C_return_type": "int",
                    "F_C_call": "c_implied_len",
                    "F_C_name": "c_implied_len",
                    "F_arg_c_call": "trim(text)//C_NULL_CHAR,\t SH_ltext,\t SH_flag",
                    "F_arguments": "text",
                    "F_name_function": "implied_len",
                    "F_name_generic": "implied_len",
                    "F_name_impl": "implied_len",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_ImpliedLen",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "ImpliedLen",
                    "underscore_name": "implied_len"
                },
                "linenumber": 116,
                "options": {
                    "F_create_bufferify_function": false,
                    "__line__": 118
                }
            },
            {
                "_fmtargs": {
                    "flag": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "flag",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&flag",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt0": "c_bool_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "SH_flag",
                            "f_var": "flag",
                            "pre_call_intent": ".TRUE._C_BOOL"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "c_const": "",
                            "c_decl": "bool flag",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "flag",
                            "cxx_addr": "&",
                            "cxx_decl": "bool flag",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "data_var": "SHData_flag",
                            "numpy_type": "NPY_BOOL",
                            "pre_call_intent": "true",
                            "py_var": "SHPy_flag",
                            "size_var": "SHSize_flag"
                        }
                    },
                    "ltext": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "ltext",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&ltext",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "SH_ltext",
                            "f_var": "ltext",
                            "pre_call_intent": "len_trim(text,kind=C_INT)"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int ltext",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "ltext",
                            "cxx_addr": "&",
                            "cxx_decl": "int ltext",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "data_var": "SHData_ltext",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "strlen(text)",
                            "py_var": "SHPy_ltext",
                            "size_var": "SHSize_ltext"
                        }
                    },
                    "text": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "text",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "text",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "text",
                            "f_var": "text"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "text",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "data_var": "SHData_text",
                            "numpy_type": null,
                            "py_var": "SHPy_text",
                            "size_var": "SHSize_text",
                            "stmt0": "py_char_in",
                            "stmt1": "py_char_in"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "ImpliedLenTrim",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "text",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "implied": "len_trim(text)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "ltext",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "true",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "flag",
                                "pointer": []
                            },
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int ImpliedLenTrim(const char *text, int ltext+implied(len_trim(text)), bool flag+implied(true))",
                "declgen": "int ImpliedLenTrim(const char * text +intent(in), int ltext +implied(len_trim(text))+intent(in)+value, bool flag +implied(true)+intent(in)+value)",
                "doxygen": {
                    "__line__": 130,
                    "brief": "Return the implied argument - text length",
                    "description": "Pass the Fortran length of the char argument directy to the C function.\nNo need for the bufferify version which will needlessly copy the string.\n"
                },
                "fmtdict": {
                    "C_call_list": "text,\t ltext,\t flag",
                    "C_name": "ImpliedLenTrim",
                    "C_prototype": "const char * text,\t int ltext,\t bool flag",
                    "C_return_type": "int",
                    "F_C_call": "c_implied_len_trim",
                    "F_C_name": "c_implied_len_trim",
                    "F_arg_c_call": "trim(text)//C_NULL_CHAR,\t SH_ltext,\t SH_flag",
                    "F_arguments": "text",
                    "F_name_function": "implied_len_trim",
                    "F_name_generic": "implied_len_trim",
                    "F_name_impl": "implied_len_trim",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_ImpliedLenTrim",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "ImpliedLenTrim",
                    "underscore_name": "implied_len_trim"
                },
                "linenumber": 126,
                "options": {
                    "F_create_bufferify_function": false,
                    "__line__": 128
                }
            },
            {
                "_fmtargs": {
                    "flag": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "flag",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&flag",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt0": "c_bool_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "SH_flag",
                            "f_var": "flag",
                            "pre_call_intent": ".TRUE._C_BOOL"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "c_const": "",
                            "c_decl": "bool flag",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "flag",
                            "cxx_addr": "&",
                            "cxx_decl": "bool flag",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "data_var": "SHData_flag",
                            "numpy_type": "NPY_BOOL",
                            "pre_call_intent": "true",
                            "py_var": "SHPy_flag",
                            "size_var": "SHSize_flag"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "bool",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "bool",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_BOOL",
                        "stmt0": "c_bool_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "bool",
                        "f_type": "logical",
                        "f_var": "SHT_rv",
                        "stmt0": "f_bool_scalar_result_",
                        "stmt1": "f_bool_result",
                        "stmtc0": "c_bool_scalar_result_",
                        "stmtc1": "c_default"
                    },
                    "fmtpy": {
                        "PyTypeObject": "PyBool_Type",
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "bool",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_BOOL",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_bool_result",
                        "stmt1": "py_bool_result"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "ImpliedBoolTrue",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "implied": "true",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "flag",
                                "pointer": []
                            },
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        }
                    ],
                    "specifier": [
                        "bool"
                    ],
                    "typemap_name": "bool"
                },
                "decl": "bool ImpliedBoolTrue(bool flag+implied(true))",
                "declgen": "bool ImpliedBoolTrue(bool flag +implied(true)+intent(in)+value)",
                "doxygen": {
                    "__line__": 137,
                    "brief": "Single, implied bool argument"
                },
                "fmtdict": {
                    "C_call_list": "flag",
                    "C_name": "ImpliedBoolTrue",
                    "C_prototype": "bool flag",
                    "C_return_type": "bool",
                    "F_C_call": "c_implied_bool_true",
                    "F_C_name": "c_implied_bool_true",
                    "F_arg_c_call": "SH_flag",
                    "F_arguments": "",
                    "F_name_function": "implied_bool_true",
                    "F_name_generic": "implied_bool_true",
                    "F_name_impl": "implied_bool_true",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_ImpliedBoolTrue",
                    "c_const": "",
                    "cxx_rv_decl": "bool SHC_rv",
                    "function_name": "ImpliedBoolTrue",
                    "underscore_name": "implied_bool_true"
                },
                "linenumber": 136,
                "options": {}
            },
            {
                "_fmtargs": {
                    "flag": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "flag",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&flag",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt0": "c_bool_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "SH_flag",
                            "f_var": "flag",
                            "pre_call_intent": ".FALSE._C_BOOL"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "c_const": "",
                            "c_decl": "bool flag",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "flag",
                            "cxx_addr": "&",
                            "cxx_decl": "bool flag",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "data_var": "SHData_flag",
                            "numpy_type": "NPY_BOOL",
                            "pre_call_intent": "false",
                            "py_var": "SHPy_flag",
                            "size_var": "SHSize_flag"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "bool",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "bool",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_BOOL",
                        "stmt0": "c_bool_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "bool",
                        "f_type": "logical",
                        "f_var": "SHT_rv",
                        "stmt0": "f_bool_scalar_result_",
                        "stmt1": "f_bool_result",
                        "stmtc0": "c_bool_scalar_result_",
                        "stmtc1": "c_default"
                    },
                    "fmtpy": {
                        "PyTypeObject": "PyBool_Type",
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "bool",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_BOOL",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_bool_result",
                        "stmt1": "py_bool_result"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "ImpliedBoolFalse",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "implied": "false",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "flag",
                                "pointer": []
                            },
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        }
                    ],
                    "specifier": [
                        "bool"
                    ],
                    "typemap_name": "bool"
                },
                "decl": "bool ImpliedBoolFalse(bool flag+implied(false))",
                "declgen": "bool ImpliedBoolFalse(bool flag +implied(false)+intent(in)+value)",
                "doxygen": {
                    "__line__": 141,
                    "brief": "Single, implied bool argument"
                },
                "fmtdict": {
                    "C_call_list": "flag",
                    "C_name": "ImpliedBoolFalse",
                    "C_prototype": "bool flag",
                    "C_return_type": "bool",
                    "F_C_call": "c_implied_bool_false",
                    "F_C_name": "c_implied_bool_false",
                    "F_arg_c_call": "SH_flag",
                    "F_arguments": "",
                    "F_name_function": "implied_bool_false",
                    "F_name_generic": "implied_bool_false",
                    "F_name_impl": "implied_bool_false",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_ImpliedBoolFalse",
                    "c_const": "",
                    "cxx_rv_decl": "bool SHC_rv",
                    "function_name": "ImpliedBoolFalse",
                    "underscore_name": "implied_bool_false"
                },
                "linenumber": 140,
                "options": {}
            },
            {
                "ast": {
                    "declarator": {
                        "name": "bindC1",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void bindC1()",
                "declgen": "void bindC1()",
                "doxygen": {
                    "__line__": 146,
                    "brief": "Rename Fortran name for interface only function",
                    "description": "This creates only an interface.\n"
                },
                "fmtdict": {
                    "C_name": "bindC1",
                    "C_prototype": "",
                    "C_return_type": "void",
                    "F_C_call": "fortran_bindc1b",
                    "F_C_name": "Fortran_bindC1a",
                    "F_arguments": "",
                    "F_name_function": "bind_c1",
                    "F_name_generic": "bind_c1",
                    "F_name_impl": "Fortran_bindC1a",
                    "F_subprogram": "subroutine",
                    "__line__": 150,
                    "c_const": "",
                    "function_name": "bindC1",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "bind_c1"
                },
                "linenumber": 145,
                "options": {
                    "__line__": 155,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "outbuf": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "outbuf",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "outbuf",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_out_",
                            "stmt1": "c_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "bindC2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "outbuf",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void bindC2(char *outbuf+intent(out))",
                "declgen": "void bindC2(char * outbuf +intent(out))",
                "doxygen": {
                    "__line__": 159,
                    "brief": "Rename Fortran name for interface only function",
                    "description": "This creates a Fortran bufferify function and an interface.\n"
                },
                "fmtdict": {
                    "C_call_list": "outbuf",
                    "C_name": "bindC2",
                    "C_prototype": "char * outbuf",
                    "C_return_type": "void",
                    "F_C_call": "c_bind_c2_bufferify",
                    "F_C_name": "c_bind_c2",
                    "F_arg_c_call": "outbuf,\t len(outbuf, kind=C_INT)",
                    "F_arguments": "outbuf",
                    "F_name_function": "bind_c2",
                    "F_name_generic": "bind_c2",
                    "F_name_impl": "Fortran_bindC2a",
                    "F_subprogram": "subroutine",
                    "__line__": 163,
                    "c_const": "",
                    "function_name": "bindC2",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "bind_c2"
                },
                "linenumber": 158,
                "options": {
                    "__line__": 168,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "outbuf": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "outbuf",
                            "c_var_len": "Noutbuf",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "outbuf",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_out_buf",
                            "stmt1": "c_char_out_buf"
                        },
                        "fmtf": {
                            "c_var": "outbuf",
                            "f_type": "character(*)",
                            "f_var": "outbuf",
                            "stmt0": "f_char_pointer_out_",
                            "stmt1": "f_default",
                            "stmtc0": "c_char_pointer_out_buf",
                            "stmtc1": "c_char_out_buf"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "bindC2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "len": "Noutbuf",
                                "value": false
                            },
                            "declarator": {
                                "name": "outbuf",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void bindC2(char *outbuf+intent(out))",
                "declgen": "void bindC2(char * outbuf +intent(out)+len(Noutbuf))",
                "doxygen": {
                    "__line__": 159,
                    "brief": "Rename Fortran name for interface only function",
                    "description": "This creates a Fortran bufferify function and an interface.\n"
                },
                "fmtdict": {
                    "C_call_list": "outbuf",
                    "C_name": "CLI_bind_c2_bufferify",
                    "C_prototype": "char * outbuf,\t int Noutbuf",
                    "C_return_type": "void",
                    "F_C_name": "c_bind_c2_bufferify",
                    "F_name_impl": "Fortran_bindC2a",
                    "__line__": 163,
                    "c_const": "",
                    "function_name": "bindC2",
                    "function_suffix": "_bufferify",
                    "underscore_name": "bind_c2"
                },
                "linenumber": 158,
                "options": {
                    "__line__": 168,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "in": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "in",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "in",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "in",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_unknown_pointer_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "in",
                            "f_type": "type(C_PTR)",
                            "f_var": "in",
                            "stmt0": "f_unknown_pointer_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_unknown_pointer_in_",
                            "stmtc1": "c_default"
                        }
                    },
                    "out": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "out",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "out",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "out",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_unknown_pointer_out_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "out",
                            "f_type": "type(C_PTR)",
                            "f_var": "out",
                            "stmt0": "f_unknown_pointer_out_",
                            "stmt1": "f_default",
                            "stmtc0": "c_unknown_pointer_out_",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "passVoidStarStar",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "in",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "out",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passVoidStarStar(void *in+intent(in), void **out+intent(out))",
                "declgen": "void passVoidStarStar(void * in +intent(in)+value, void * * out +intent(out))",
                "doxygen": {
                    "__line__": 172,
                    "brief": "Assign in to out.",
                    "description": "No bufferify function is created, only an interface.\n"
                },
                "fmtdict": {
                    "C_call_list": "in,\t out",
                    "C_name": "passVoidStarStar",
                    "C_prototype": "void * in,\t void * * out",
                    "C_return_type": "void",
                    "F_C_call": "c_pass_void_star_star",
                    "F_C_name": "pass_void_star_star",
                    "F_arg_c_call": "in,\t out",
                    "F_arguments": "in,\t out",
                    "F_name_function": "pass_void_star_star",
                    "F_name_generic": "pass_void_star_star",
                    "F_name_impl": "pass_void_star_star",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "passVoidStarStar",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "pass_void_star_star"
                },
                "linenumber": 171,
                "options": {
                    "__line__": 176,
                    "literalinclude": true,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_unknown_pointer_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg",
                            "f_var": "arg"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "passAssumedType",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "assumedtype": true,
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passAssumedType(void *arg+assumedtype)",
                "declgen": "int passAssumedType(void * arg +assumedtype+intent(in))",
                "doxygen": {
                    "__line__": 181,
                    "brief": "Test assumed-type",
                    "description": "No bufferify function is created, only an interface.\nShould only be call with an C_INT argument, and will\nreturn the value passed in.\n"
                },
                "fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "passAssumedType",
                    "C_prototype": "void * arg",
                    "C_return_type": "int",
                    "F_C_call": "c_pass_assumed_type",
                    "F_C_name": "pass_assumed_type",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "pass_assumed_type",
                    "F_name_generic": "pass_assumed_type",
                    "F_name_impl": "pass_assumed_type",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "passAssumedType",
                    "underscore_name": "pass_assumed_type"
                },
                "linenumber": 180,
                "options": {
                    "__line__": 187,
                    "literalinclude": true,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_unknown_pointer_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg",
                            "f_var": "arg"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "passAssumedTypeDim",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "assumedtype": true,
                                "dimension": "*",
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passAssumedTypeDim(void *arg+assumedtype+dimension)",
                "declgen": "void passAssumedTypeDim(void * arg +assumedtype+dimension(*)+intent(in))",
                "doxygen": {
                    "__line__": 192,
                    "brief": "Test assumed-type with dimension"
                },
                "fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "passAssumedTypeDim",
                    "C_prototype": "void * arg",
                    "C_return_type": "void",
                    "F_C_call": "c_pass_assumed_type_dim",
                    "F_C_name": "pass_assumed_type_dim",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "pass_assumed_type_dim",
                    "F_name_generic": "pass_assumed_type_dim",
                    "F_name_impl": "pass_assumed_type_dim",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "passAssumedTypeDim",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "pass_assumed_type_dim"
                },
                "linenumber": 191,
                "options": {
                    "__line__": 194,
                    "literalinclude": true,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_unknown_pointer_in_",
                            "stmt1": "c_default"
                        }
                    },
                    "outbuf": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "outbuf",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "outbuf",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_out_",
                            "stmt1": "c_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_buf",
                        "stmtc1": "c_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "passAssumedTypeBuf",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "assumedtype": true,
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "outbuf",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passAssumedTypeBuf(void *arg+assumedtype, char *outbuf+intent(out))",
                "declgen": "int passAssumedTypeBuf(void * arg +assumedtype+intent(in), char * outbuf +intent(out))",
                "doxygen": {
                    "__line__": 199,
                    "brief": "Test assumed-type",
                    "description": "A bufferify function is created.\nShould only be call with an C_INT argument, and will\nreturn the value passed in.\n"
                },
                "fmtdict": {
                    "C_call_list": "arg,\t outbuf",
                    "C_name": "passAssumedTypeBuf",
                    "C_prototype": "void * arg,\t char * outbuf",
                    "C_return_type": "int",
                    "F_C_call": "c_pass_assumed_type_buf_bufferify",
                    "F_C_name": "c_pass_assumed_type_buf",
                    "F_arg_c_call": "arg,\t outbuf,\t len(outbuf, kind=C_INT)",
                    "F_arguments": "arg,\t outbuf",
                    "F_name_function": "pass_assumed_type_buf",
                    "F_name_generic": "pass_assumed_type_buf",
                    "F_name_impl": "pass_assumed_type_buf",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "passAssumedTypeBuf",
                    "underscore_name": "pass_assumed_type_buf"
                },
                "linenumber": 198,
                "options": {
                    "__line__": 205,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_unknown_pointer_in_buf",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg",
                            "f_var": "arg"
                        }
                    },
                    "outbuf": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "outbuf",
                            "c_var_len": "Noutbuf",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "outbuf",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_out_buf",
                            "stmt1": "c_char_out_buf"
                        },
                        "fmtf": {
                            "c_var": "outbuf",
                            "f_type": "character(*)",
                            "f_var": "outbuf",
                            "stmt0": "f_char_pointer_out_",
                            "stmt1": "f_default",
                            "stmtc0": "c_char_pointer_out_buf",
                            "stmtc1": "c_char_out_buf"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "passAssumedTypeBuf",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "assumedtype": true,
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "len": "Noutbuf",
                                "value": false
                            },
                            "declarator": {
                                "name": "outbuf",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passAssumedTypeBuf(void *arg+assumedtype, char *outbuf+intent(out))",
                "declgen": "int passAssumedTypeBuf(void * arg +assumedtype+intent(in), char * outbuf +intent(out)+len(Noutbuf))",
                "doxygen": {
                    "__line__": 199,
                    "brief": "Test assumed-type",
                    "description": "A bufferify function is created.\nShould only be call with an C_INT argument, and will\nreturn the value passed in.\n"
                },
                "fmtdict": {
                    "C_call_list": "arg,\t outbuf",
                    "C_name": "CLI_pass_assumed_type_buf_bufferify",
                    "C_prototype": "void * arg,\t char * outbuf,\t int Noutbuf",
                    "C_return_type": "int",
                    "F_C_name": "c_pass_assumed_type_buf_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "passAssumedTypeBuf",
                    "function_suffix": "_bufferify",
                    "underscore_name": "pass_assumed_type_buf"
                },
                "linenumber": 198,
                "options": {
                    "__line__": 205,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "incr": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "incr",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&incr",
                            "cxx_member": ".",
                            "cxx_type": "void",
                            "cxx_var": "incr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_unknown_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "incr",
                            "f_var": "incr"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "type",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&type",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "type",
                            "f_type": "integer(C_INT)",
                            "f_var": "type",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "callback1",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "external": true,
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "func": {
                                    "name": "incr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "pointer": []
                            },
                            "params": [],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int callback1(int type, void (*incr)()+external)",
                "declgen": "int callback1(int type +intent(in)+value, void ( * incr)() +external+intent(in)+value)",
                "doxygen": {
                    "__line__": 213,
                    "brief": "Test function pointer"
                },
                "fmtdict": {
                    "C_call_list": "type,\t incr",
                    "C_name": "callback1",
                    "C_prototype": "int type,\t void ( * incr)(\t)",
                    "C_return_type": "int",
                    "F_C_call": "c_callback1",
                    "F_C_name": "c_callback1",
                    "F_arg_c_call": "type,\t incr",
                    "F_arguments": "type,\t incr",
                    "F_name_function": "callback1",
                    "F_name_generic": "callback1",
                    "F_name_impl": "callback1",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "callback1",
                    "underscore_name": "callback1"
                },
                "linenumber": 212,
                "options": {
                    "__line__": 215,
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "in": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "in",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "in",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "in",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_unknown_pointer_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "in",
                            "f_var": "in"
                        }
                    },
                    "incr": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "incr",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&incr",
                            "cxx_member": ".",
                            "cxx_type": "void",
                            "cxx_var": "incr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_unknown_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "incr",
                            "f_var": "incr"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "type",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&type",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "type",
                            "f_type": "integer(C_INT)",
                            "f_var": "type",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "callback2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "assumedtype": true,
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "in",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "external": true,
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "func": {
                                    "name": "incr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "pointer": []
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "value": false
                                    },
                                    "declarator": {
                                        "pointer": [
                                            {
                                                "ptr": "*"
                                            }
                                        ]
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void callback2(int type, void * in+assumedtype, void (*incr)(int *)+external)",
                "declgen": "void callback2(int type +intent(in)+value, void * in +assumedtype+intent(in), void ( * incr)(int *) +external+intent(in)+value)",
                "doxygen": {
                    "__line__": 222,
                    "brief": "Test function pointer"
                },
                "fmtdict": {
                    "C_call_list": "type,\t in,\t incr",
                    "C_name": "callback2",
                    "C_prototype": "int type,\t void * in,\t void ( * incr)(\tint *)",
                    "C_return_type": "void",
                    "F_C_call": "c_callback2",
                    "F_C_name": "c_callback2",
                    "F_arg_c_call": "type,\t in,\t incr",
                    "F_arguments": "type,\t in,\t incr",
                    "F_name_function": "callback2",
                    "F_name_generic": "callback2",
                    "F_name_impl": "callback2",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "callback2",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "callback2"
                },
                "linenumber": 220,
                "options": {
                    "__line__": 224,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "in": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "in",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "in",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "in",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_unknown_pointer_in_",
                            "stmt1": "c_default"
                        }
                    },
                    "incr": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "incr",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&incr",
                            "cxx_member": ".",
                            "cxx_type": "void",
                            "cxx_var": "incr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_unknown_scalar_in_",
                            "stmt1": "c_default"
                        }
                    },
                    "outbuf": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "outbuf",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "outbuf",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_out_",
                            "stmt1": "c_default"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "type",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "type",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_in_",
                            "stmt1": "c_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "callback3",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "type",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "assumedtype": true,
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "in",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "external": true,
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "func": {
                                    "name": "incr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "pointer": []
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "value": false
                                    },
                                    "declarator": {
                                        "pointer": [
                                            {
                                                "ptr": "*"
                                            }
                                        ]
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "outbuf",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void callback3(const char *type, void * in+assumedtype, void (*incr)(int *)+external, char *outbuf+intent(out))",
                "declgen": "void callback3(const char * type +intent(in), void * in +assumedtype+intent(in), void ( * incr)(int *) +external+intent(in)+value, char * outbuf +intent(out))",
                "doxygen": {
                    "__line__": 230,
                    "brief": "Test function pointer",
                    "description": "A bufferify function will be created.\n"
                },
                "fmtdict": {
                    "C_call_list": "type,\t in,\t incr,\t outbuf",
                    "C_name": "callback3",
                    "C_prototype": "const char * type,\t void * in,\t void ( * incr)(\tint *),\t char * outbuf",
                    "C_return_type": "void",
                    "F_C_call": "c_callback3_bufferify",
                    "F_C_name": "c_callback3",
                    "F_arg_c_call": "trim(type)//C_NULL_CHAR,\t in,\t incr,\t outbuf,\t len(outbuf, kind=C_INT)",
                    "F_arguments": "type,\t in,\t incr,\t outbuf",
                    "F_name_function": "callback3",
                    "F_name_generic": "callback3",
                    "F_name_impl": "callback3",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "callback3",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "callback3"
                },
                "linenumber": 228,
                "options": {
                    "__line__": 234,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "in": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "in",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "in",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "in",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_unknown_pointer_in_buf",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "in",
                            "f_var": "in"
                        }
                    },
                    "incr": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "incr",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&incr",
                            "cxx_member": ".",
                            "cxx_type": "void",
                            "cxx_var": "incr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_unknown_scalar_in_buf",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "incr",
                            "f_var": "incr"
                        }
                    },
                    "outbuf": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "outbuf",
                            "c_var_len": "Noutbuf",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "outbuf",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_out_buf",
                            "stmt1": "c_char_out_buf"
                        },
                        "fmtf": {
                            "c_var": "outbuf",
                            "f_type": "character(*)",
                            "f_var": "outbuf",
                            "stmt0": "f_char_pointer_out_",
                            "stmt1": "f_default",
                            "stmtc0": "c_char_pointer_out_buf",
                            "stmtc1": "c_char_out_buf"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "type",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "type",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_pointer_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "type",
                            "f_var": "type"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "callback3",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "type",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "assumedtype": true,
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "in",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "external": true,
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "func": {
                                    "name": "incr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "pointer": []
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "value": false
                                    },
                                    "declarator": {
                                        "pointer": [
                                            {
                                                "ptr": "*"
                                            }
                                        ]
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "len": "Noutbuf",
                                "value": false
                            },
                            "declarator": {
                                "name": "outbuf",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void callback3(const char *type, void * in+assumedtype, void (*incr)(int *)+external, char *outbuf+intent(out))",
                "declgen": "void callback3(const char * type +intent(in), void * in +assumedtype+intent(in), void ( * incr)(int *) +external+intent(in)+value, char * outbuf +intent(out)+len(Noutbuf))",
                "doxygen": {
                    "__line__": 230,
                    "brief": "Test function pointer",
                    "description": "A bufferify function will be created.\n"
                },
                "fmtdict": {
                    "C_call_list": "type,\t in,\t incr,\t outbuf",
                    "C_name": "CLI_callback3_bufferify",
                    "C_prototype": "const char * type,\t void * in,\t void ( * incr)(\tint *),\t char * outbuf,\t int Noutbuf",
                    "C_return_type": "void",
                    "F_C_name": "c_callback3_bufferify",
                    "c_const": "",
                    "function_name": "callback3",
                    "function_suffix": "_bufferify",
                    "underscore_name": "callback3"
                },
                "linenumber": 228,
                "options": {
                    "__line__": 234,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "alloc": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "alloc",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&alloc",
                            "cxx_member": ".",
                            "cxx_type": "void",
                            "cxx_var": "alloc",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_unknown_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "alloc",
                            "f_var": "alloc"
                        }
                    },
                    "arr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arr",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arr",
                            "cxx_member": "->",
                            "cxx_type": "array_info",
                            "cxx_var": "arr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmt0": "c_struct_pointer_inout_",
                            "stmt1": "c_struct"
                        },
                        "fmtf": {
                            "c_var": "arr",
                            "f_type": "type(array_info)",
                            "f_var": "arr",
                            "stmt0": "f_struct_pointer_inout_",
                            "stmt1": "f_default",
                            "stmtc0": "c_struct_pointer_inout_",
                            "stmtc1": "c_struct"
                        }
                    },
                    "tc": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "tc",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&tc",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "tc",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "tc",
                            "f_type": "integer(C_INT)",
                            "f_var": "tc",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "callback_set_alloc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "tc",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "inout",
                                "value": false
                            },
                            "declarator": {
                                "name": "arr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "array_info"
                            ],
                            "typemap_name": "array_info"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "func": {
                                    "name": "alloc",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "pointer": []
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "tc",
                                        "pointer": []
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                },
                                {
                                    "attrs": {
                                        "intent": "inout",
                                        "value": false
                                    },
                                    "declarator": {
                                        "name": "arr",
                                        "pointer": [
                                            {
                                                "ptr": "*"
                                            }
                                        ]
                                    },
                                    "specifier": [
                                        "array_info"
                                    ],
                                    "typemap_name": "array_info"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void callback_set_alloc(int tc, array_info *arr+intent(inout), void (*alloc)(int tc+intent(in), array_info *arr+intent(inout)))",
                "declgen": "void callback_set_alloc(int tc +intent(in)+value, array_info * arr +intent(inout), void ( * alloc)(int tc +intent(in)+value, array_info * arr +intent(inout)) +intent(in)+value)",
                "doxygen": {
                    "__line__": 240,
                    "description": "The function argument takes a struct argument\nwhich is defined in this library.\nUse IMPORT.\n"
                },
                "fmtdict": {
                    "C_call_list": "tc,\t arr,\t alloc",
                    "C_name": "callback_set_alloc",
                    "C_prototype": "int tc,\t array_info * arr,\t void ( * alloc)(\tint tc,\t array_info * arr)",
                    "C_return_type": "void",
                    "F_C_call": "c_callback_set_alloc",
                    "F_C_name": "callback_set_alloc",
                    "F_arg_c_call": "tc,\t arr,\t alloc",
                    "F_arguments": "tc,\t arr,\t alloc",
                    "F_name_function": "callback_set_alloc",
                    "F_name_generic": "callback_set_alloc",
                    "F_name_impl": "callback_set_alloc",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "callback_set_alloc",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "callback_set_alloc"
                },
                "linenumber": 238,
                "options": {
                    "__line__": 245,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            }
        ],
        "language": "c",
        "options": {
            "C_API_case": "native",
            "C_enum_member_template": "{C_prefix}{C_name_scope}{enum_member_name}",
            "C_enum_template": "{C_prefix}{C_name_scope}{enum_name}",
            "C_header_filename_class_template": "wrap{file_scope}.{C_header_filename_suffix}",
            "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}",
            "C_header_filename_namespace_template": "wrap{file_scope}.{C_header_filename_suffix}",
            "C_header_utility_template": "types{library}.{C_header_filename_suffix}",
            "C_impl_filename_class_template": "wrap{file_scope}.{C_impl_filename_suffix}",
            "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}",
            "C_impl_filename_namespace_template": "wrap{file_scope}.{C_impl_filename_suffix}",
            "C_line_length": 72,
            "C_memory_dtor_function_template": "{C_prefix}SHROUD_memory_destructor",
            "C_name_template": "{C_prefix}{C_name_scope}{underscore_name}{function_suffix}{template_suffix}",
            "C_var_capsule_template": "C{c_var}",
            "C_var_context_template": "D{c_var}",
            "C_var_len_template": "N{c_var}",
            "C_var_size_template": "S{c_var}",
            "C_var_trim_template": "L{c_var}",
            "F_C_name_template": "{F_C_prefix}{F_name_scope}{underscore_name}{function_suffix}{template_suffix}",
            "F_abstract_interface_argument_template": "arg{index}",
            "F_abstract_interface_subprogram_template": "{underscore_name}_{argname}",
            "F_auto_reference_count": false,
            "F_capsule_data_type_class_template": "SHROUD_{F_name_scope}capsule",
            "F_create_bufferify_function": true,
            "F_create_generic": true,
            "F_enum_member_template": "{F_name_scope}{enum_member_lower}",
            "F_flatten_namespace": false,
            "F_force_wrapper": false,
            "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}",
            "F_impl_filename_namespace_template": "wrapf{file_scope}.{F_filename_suffix}",
            "F_line_length": 72,
            "F_module_name_library_template": "{library_lower}_mod",
            "F_module_name_namespace_template": "{file_scope}_mod",
            "F_name_function_template": "{underscore_name}{function_suffix}{template_suffix}",
            "F_name_generic_template": "{underscore_name}",
            "F_name_impl_template": "{F_name_scope}{underscore_name}{function_suffix}{template_suffix}",
            "F_return_fortran_pointer": true,
            "F_standard": 2003,
            "F_string_len_trim": true,
            "LUA_class_reg_template": "{LUA_prefix}{cxx_class}_Reg",
            "LUA_ctor_name_template": "{cxx_class}",
            "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}",
            "LUA_metadata_template": "{cxx_class}.metatable",
            "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}",
            "LUA_module_name_template": "{library_lower}",
            "LUA_module_reg_template": "{LUA_prefix}{library}_Reg",
            "LUA_name_impl_template": "{LUA_prefix}{C_name_scope}{underscore_name}",
            "LUA_name_template": "{function_name}",
            "LUA_userdata_member_template": "self",
            "LUA_userdata_type_template": "{LUA_prefix}{cxx_class}_Type",
            "PY_PyObject_template": "{PY_prefix}{cxx_class}",
            "PY_PyTypeObject_template": "{PY_prefix}{cxx_class}_Type",
            "PY_array_arg": "numpy",
            "PY_capsule_destructor_function_template": "{PY_prefix}SHROUD_capsule_destructor",
            "PY_dtor_context_array_template": "{PY_prefix}SHROUD_capsule_context",
            "PY_dtor_context_typedef_template": "{PY_prefix}SHROUD_dtor_context",
            "PY_fetch_context_function_template": "{PY_prefix}SHROUD_fetch_context",
            "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}",
            "PY_member_getter_template": "{PY_prefix}{cxx_class}_{variable_name}_getter",
            "PY_member_setter_template": "{PY_prefix}{cxx_class}_{variable_name}_setter",
            "PY_module_filename_template": "py{file_scope}module.{PY_impl_filename_suffix}",
            "PY_name_impl_template": "{PY_prefix}{function_name}{function_suffix}{template_suffix}",
            "PY_numpy_array_capsule_name_template": "{PY_prefix}array_dtor",
            "PY_release_memory_function_template": "{PY_prefix}SHROUD_release_memory",
            "PY_struct_arg": "numpy",
            "PY_struct_array_descr_create_template": "{PY_prefix}{cxx_class}_create_array_descr",
            "PY_struct_array_descr_name_template": "{cxx_class}_dtype",
            "PY_struct_array_descr_variable_template": "{PY_prefix}{cxx_class}_array_descr",
            "PY_type_filename_template": "py{file_scope}type.{PY_impl_filename_suffix}",
            "PY_type_impl_template": "{PY_prefix}{cxx_class}_{PY_type_method}{function_suffix}{template_suffix}",
            "PY_utility_filename_template": "py{library}util.{PY_impl_filename_suffix}",
            "YAML_type_filename_template": "{library_lower}_types.yaml",
            "__line__": 24,
            "debug": true,
            "debug_index": false,
            "doxygen": true,
            "flatten_namespace": false,
            "literalinclude": false,
            "literalinclude2": true,
            "return_scalar_pointer": "pointer",
            "show_splicer_comments": true,
            "wrap_c": true,
            "wrap_fortran": true,
            "wrap_lua": false,
            "wrap_python": true
        },
        "scope_file": [
            "Clibrary"
        ]
    }
}