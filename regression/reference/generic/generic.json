{
    "__NOTICE__": "This file is generated by Shroud and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2020, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "generic.h",
            "helper.h"
        ],
        "fmtdict": {
            "CXX_local": "SHCXX_",
            "CXX_template": "",
            "CXX_this": "SH_this",
            "CXX_this_call": "",
            "C_array_type": "GEN_SHROUD_array",
            "C_bufferify_suffix": "_bufferify",
            "C_call_list": "",
            "C_capsule_data_type": "GEN_SHROUD_capsule_data",
            "C_custom_return_type": "",
            "C_header_filename": "wrapgeneric.h",
            "C_header_filename_suffix": "h",
            "C_header_utility": "typesgeneric.h",
            "C_impl_filename": "wrapgeneric.c",
            "C_impl_filename_suffix": "c",
            "C_local": "SHC_",
            "C_memory_dtor_function": "GEN_SHROUD_memory_destructor",
            "C_name_scope": "",
            "C_post_call": "",
            "C_pre_call": "",
            "C_prefix": "GEN_",
            "C_result": "rv",
            "C_string_result_as_arg": "SHF_rv",
            "C_this": "self",
            "F_C_prefix": "c_",
            "F_C_pure_clause": "",
            "F_C_result_clause": "",
            "F_arg_c_call": "",
            "F_array_type": "SHROUD_array",
            "F_capsule_data_type": "SHROUD_capsule_data",
            "F_capsule_final_function": "SHROUD_capsule_final",
            "F_capsule_type": "SHROUD_capsule",
            "F_derived_member": "cxxmem",
            "F_filename_suffix": "f",
            "F_impl_filename": "wrapfgeneric.f",
            "F_module_name": "generic_mod",
            "F_name_assign": "assign",
            "F_name_associated": "associated",
            "F_name_final": "final",
            "F_name_instance_get": "get_instance",
            "F_name_instance_set": "set_instance",
            "F_name_scope": "",
            "F_pointer": "SHT_ptr",
            "F_pure_clause": "",
            "F_result": "SHT_rv",
            "F_result_capsule": "SHT_crv",
            "F_result_clause": "",
            "F_result_ptr": "SHT_prv",
            "F_string_result_as_arg": "",
            "F_this": "obj",
            "LUA_header_filename_suffix": "h",
            "LUA_impl_filename_suffix": "c",
            "LUA_prefix": "l_",
            "LUA_result": "rv",
            "LUA_state_var": "L",
            "LUA_this_call": "",
            "PY_capsule_destructor_function": "PY_SHROUD_capsule_destructor",
            "PY_dtor_context_array": "PY_SHROUD_capsule_context",
            "PY_dtor_context_typedef": "PY_SHROUD_dtor_context",
            "PY_fetch_context_function": "PY_SHROUD_fetch_context",
            "PY_module_init": "generic",
            "PY_module_name": "generic",
            "PY_module_scope": "generic",
            "PY_numpy_array_capsule_name": "PY_array_dtor",
            "PY_prefix": "PY_",
            "PY_release_memory_function": "PY_SHROUD_release_memory",
            "PY_result": "SHTPy_rv",
            "PY_this_call": "",
            "PY_type_dtor": "idtor",
            "PY_type_obj": "obj",
            "YAML_type_filename": "generic_types.yaml",
            "c_temp": "SHT_",
            "cast1": ") ",
            "cast2": "",
            "cast_const": "(",
            "cast_reinterpret": "(",
            "cast_static": "(",
            "class_scope": "",
            "cxx_class": "",
            "f_pointer_shape": "",
            "f_var_shape": "",
            "file_scope": "generic",
            "function_suffix": "",
            "library": "generic",
            "library_lower": "generic",
            "library_upper": "GENERIC",
            "namespace_scope": "",
            "stdlib": "",
            "template_suffix": "",
            "void_proto": "void"
        },
        "functions": [
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "double",
                        "f_type": "real(C_DOUBLE)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "GetGlobalDouble",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double GetGlobalDouble()",
                "declgen": "double GetGlobalDouble()",
                "fmtdict": {
                    "C_name": "GetGlobalDouble",
                    "C_prototype": "",
                    "C_return_type": "double",
                    "F_C_call": "c_get_global_double",
                    "F_C_name": "get_global_double",
                    "F_arguments": "",
                    "F_name_function": "get_global_double",
                    "F_name_generic": "get_global_double",
                    "F_name_impl": "get_global_double",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "GetGlobalDouble",
                    "underscore_name": "get_global_double"
                },
                "linenumber": 23,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&arg",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "arg",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GenericReal",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GenericReal(double arg)",
                "declgen": "void GenericReal(double arg +intent(in)+value)",
                "doxygen": {
                    "__line__": 28,
                    "brief": "Single argument generic"
                },
                "fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "GenericReal",
                    "C_prototype": "double arg",
                    "C_return_type": "void",
                    "F_C_name": "c_generic_real",
                    "c_const": "",
                    "function_name": "GenericReal",
                    "underscore_name": "generic_real"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg",
                                    "pointer": []
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            }
                        ],
                        "function_suffix": "_float",
                        "generic": "(float arg)"
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg",
                                    "pointer": []
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "function_suffix": "_double",
                        "generic": "(double arg)"
                    }
                ],
                "linenumber": 25,
                "options": {
                    "__line__": 26,
                    "literalinclude": true,
                    "wrap_fortran": false
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GenericReal",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GenericReal(double arg)",
                "declgen": "void GenericReal(float arg +intent(in)+value)",
                "doxygen": {
                    "__line__": 28,
                    "brief": "Single argument generic"
                },
                "fmtdict": {
                    "F_C_call": "c_generic_real",
                    "F_arg_c_call": "real(arg, C_DOUBLE)",
                    "F_arguments": "arg",
                    "F_name_function": "generic_real_float",
                    "F_name_generic": "generic_real",
                    "F_name_impl": "generic_real_float",
                    "F_subprogram": "subroutine",
                    "function_name": "GenericReal",
                    "function_suffix": "_float",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "generic_real"
                },
                "linenumber": 25,
                "options": {
                    "__line__": 26,
                    "literalinclude": true,
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GenericReal",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GenericReal(double arg)",
                "declgen": "void GenericReal(double arg +intent(in)+value)",
                "doxygen": {
                    "__line__": 28,
                    "brief": "Single argument generic"
                },
                "fmtdict": {
                    "F_C_call": "c_generic_real",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "generic_real_double",
                    "F_name_generic": "generic_real",
                    "F_name_impl": "generic_real_double",
                    "F_subprogram": "subroutine",
                    "function_name": "GenericReal",
                    "function_suffix": "_double",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "generic_real"
                },
                "linenumber": 25,
                "options": {
                    "__line__": 26,
                    "literalinclude": true,
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&arg1",
                            "cxx_member": ".",
                            "cxx_type": "long",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_LONG",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_type": "integer(C_LONG)",
                            "f_var": "arg1",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&arg2",
                            "cxx_member": ".",
                            "cxx_type": "long",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_LONG",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "arg2",
                            "f_type": "integer(C_LONG)",
                            "f_var": "arg2",
                            "stmt0": "f_native_scalar_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "long",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "long",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_LONG",
                        "stmt0": "c_native_scalar_result_",
                        "stmt1": "c_default"
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GenericReal2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "long"
                            ],
                            "typemap_name": "long"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "long"
                            ],
                            "typemap_name": "long"
                        }
                    ],
                    "specifier": [
                        "long"
                    ],
                    "typemap_name": "long"
                },
                "decl": "long GenericReal2(long arg1, long arg2)",
                "declgen": "long GenericReal2(long arg1 +intent(in)+value, long arg2 +intent(in)+value)",
                "doxygen": {
                    "__line__": 37,
                    "brief": "Two argument generic",
                    "description": "It is not possible to call the function with (int, long)\nor (long, int)\n"
                },
                "fmtdict": {
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "GenericReal2",
                    "C_prototype": "long arg1,\t long arg2",
                    "C_return_type": "long",
                    "F_C_name": "c_generic_real2",
                    "c_const": "",
                    "cxx_rv_decl": "long SHC_rv",
                    "function_name": "GenericReal2",
                    "underscore_name": "generic_real2"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg1",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg2",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "function_suffix": "_all_int",
                        "generic": "(int arg1, int arg2)"
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg1",
                                    "pointer": []
                                },
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg2",
                                    "pointer": []
                                },
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "function_suffix": "_all_long",
                        "generic": "(long arg1, long arg2)"
                    }
                ],
                "linenumber": 36,
                "options": {
                    "wrap_fortran": false
                }
            },
            {
                "_fmtresult": {
                    "fmtf": {
                        "cxx_type": "long",
                        "f_type": "integer(C_LONG)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GenericReal2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "long"
                    ],
                    "typemap_name": "long"
                },
                "decl": "long GenericReal2(long arg1, long arg2)",
                "declgen": "long GenericReal2(int arg1 +intent(in)+value, int arg2 +intent(in)+value)",
                "doxygen": {
                    "__line__": 37,
                    "brief": "Two argument generic",
                    "description": "It is not possible to call the function with (int, long)\nor (long, int)\n"
                },
                "fmtdict": {
                    "F_C_call": "c_generic_real2",
                    "F_arg_c_call": "int(arg1, C_LONG),\t int(arg2, C_LONG)",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_function": "generic_real2_all_int",
                    "F_name_generic": "generic_real2",
                    "F_name_impl": "generic_real2_all_int",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "function_name": "GenericReal2",
                    "function_suffix": "_all_int",
                    "underscore_name": "generic_real2"
                },
                "linenumber": 36,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtf": {
                        "cxx_type": "long",
                        "f_type": "integer(C_LONG)",
                        "f_var": "SHT_rv",
                        "stmt0": "f_native_scalar_result_",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GenericReal2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "long"
                            ],
                            "typemap_name": "long"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "long"
                            ],
                            "typemap_name": "long"
                        }
                    ],
                    "specifier": [
                        "long"
                    ],
                    "typemap_name": "long"
                },
                "decl": "long GenericReal2(long arg1, long arg2)",
                "declgen": "long GenericReal2(long arg1 +intent(in)+value, long arg2 +intent(in)+value)",
                "doxygen": {
                    "__line__": 37,
                    "brief": "Two argument generic",
                    "description": "It is not possible to call the function with (int, long)\nor (long, int)\n"
                },
                "fmtdict": {
                    "F_C_call": "c_generic_real2",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_function": "generic_real2_all_long",
                    "F_name_generic": "generic_real2",
                    "F_name_impl": "generic_real2_all_long",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "function_name": "GenericReal2",
                    "function_suffix": "_all_long",
                    "underscore_name": "generic_real2"
                },
                "linenumber": 36,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "addr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "addr",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "addr",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_unknown_pointer_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "addr",
                            "f_type": "real(C_FLOAT)",
                            "f_var": "addr",
                            "stmt0": "f_unknown_pointer_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_unknown_pointer_in_",
                            "stmtc1": "c_default"
                        }
                    },
                    "size": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "size",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&size",
                            "cxx_member": ".",
                            "cxx_type": "size_t",
                            "cxx_var": "size",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "SH_size",
                            "f_var": "size",
                            "pre_call_intent": "size(addr,kind=C_SIZE_T)"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "type",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&type",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "SH_type",
                            "f_var": "type",
                            "pre_call_intent": "T_FLOAT"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "SavePointer",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "addr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "size(addr)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "size",
                                "pointer": []
                            },
                            "specifier": [
                                "size_t"
                            ],
                            "typemap_name": "size_t"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer(void *addr, int type, size_t size+implied(size(addr)))",
                "declgen": "void SavePointer(void * addr +intent(in)+value, int type +intent(in)+value, size_t size +implied(size(addr))+intent(in)+value)",
                "fmtdict": {
                    "C_call_list": "addr,\t type,\t size",
                    "C_name": "SavePointer",
                    "C_prototype": "void * addr,\t int type,\t size_t size",
                    "C_return_type": "void",
                    "F_C_name": "c_save_pointer",
                    "c_const": "",
                    "function_name": "SavePointer",
                    "underscore_name": "save_pointer"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "dimension": ":",
                                    "intent": "in",
                                    "value": false
                                },
                                "declarator": {
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "attrs": {
                                    "implied": "T_FLOAT",
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "type",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "implied": "size(addr)",
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "size",
                                    "pointer": []
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "function_suffix": "_float1d",
                        "generic": "(float *addr+dimension(:),    int type+implied(T_FLOAT))"
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "dimension": ":,:",
                                    "intent": "in",
                                    "value": false
                                },
                                "declarator": {
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "attrs": {
                                    "implied": "T_FLOAT",
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "type",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "implied": "size(addr)",
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "size",
                                    "pointer": []
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "function_suffix": "_float2d",
                        "generic": "(float *addr+dimension(:,:),  int type+implied(T_FLOAT))"
                    }
                ],
                "linenumber": 48,
                "options": {
                    "wrap_fortran": false
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "SavePointer",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "addr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        },
                        {
                            "attrs": {
                                "implied": "T_FLOAT",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "size(addr)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "size",
                                "pointer": []
                            },
                            "specifier": [
                                "size_t"
                            ],
                            "typemap_name": "size_t"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer(void *addr, int type, size_t size+implied(size(addr)))",
                "declgen": "void SavePointer(float * addr +dimension(:)+intent(in), int type +implied(T_FLOAT)+intent(in)+value, size_t size +implied(size(addr))+intent(in)+value)",
                "fmtdict": {
                    "F_C_call": "c_save_pointer",
                    "F_arg_c_call": "C_LOC(addr),\t SH_type,\t SH_size",
                    "F_arguments": "addr",
                    "F_name_function": "save_pointer_float1d",
                    "F_name_generic": "save_pointer",
                    "F_name_impl": "save_pointer_float1d",
                    "F_subprogram": "subroutine",
                    "function_name": "SavePointer",
                    "function_suffix": "_float1d",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "save_pointer"
                },
                "linenumber": 48,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "SavePointer",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":,:",
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "addr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        },
                        {
                            "attrs": {
                                "implied": "T_FLOAT",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "size(addr)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "size",
                                "pointer": []
                            },
                            "specifier": [
                                "size_t"
                            ],
                            "typemap_name": "size_t"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer(void *addr, int type, size_t size+implied(size(addr)))",
                "declgen": "void SavePointer(float * addr +dimension(:,:)+intent(in), int type +implied(T_FLOAT)+intent(in)+value, size_t size +implied(size(addr))+intent(in)+value)",
                "fmtdict": {
                    "F_C_call": "c_save_pointer",
                    "F_arg_c_call": "C_LOC(addr),\t SH_type,\t SH_size",
                    "F_arguments": "addr",
                    "F_name_function": "save_pointer_float2d",
                    "F_name_generic": "save_pointer",
                    "F_name_impl": "save_pointer_float2d",
                    "F_subprogram": "subroutine",
                    "function_name": "SavePointer",
                    "function_suffix": "_float2d",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "save_pointer"
                },
                "linenumber": 48,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "addr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "addr",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "addr",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_unknown_pointer_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "addr",
                            "f_type": "real(C_FLOAT)",
                            "f_var": "addr",
                            "stmt0": "f_unknown_pointer_in_",
                            "stmt1": "f_default",
                            "stmtc0": "c_unknown_pointer_in_",
                            "stmtc1": "c_default"
                        }
                    },
                    "size": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "size",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&size",
                            "cxx_member": ".",
                            "cxx_type": "size_t",
                            "cxx_var": "size",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "SH_size",
                            "f_var": "size",
                            "pre_call_intent": "size(addr,kind=C_SIZE_T)"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "type",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&type",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "SH_type",
                            "f_var": "type",
                            "pre_call_intent": "SH_TYPE_FLOAT"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "SavePointer2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "addr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "implied": "type(addr)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "size(addr)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "size",
                                "pointer": []
                            },
                            "specifier": [
                                "size_t"
                            ],
                            "typemap_name": "size_t"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer2(void *addr, int type+implied(type(addr)), size_t size+implied(size(addr)))",
                "declgen": "void SavePointer2(void * addr +intent(in)+value, int type +implied(type(addr))+intent(in)+value, size_t size +implied(size(addr))+intent(in)+value)",
                "fmtdict": {
                    "C_call_list": "addr,\t type,\t size",
                    "C_name": "GEN_save_pointer2",
                    "C_prototype": "void * addr,\t int type,\t size_t size",
                    "C_return_type": "void",
                    "F_C_name": "c_save_pointer2",
                    "c_const": "",
                    "function_name": "SavePointer2",
                    "underscore_name": "save_pointer2"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "dimension": ":",
                                    "intent": "in",
                                    "value": false
                                },
                                "declarator": {
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "attrs": {
                                    "implied": "type(addr)",
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "type",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "implied": "size(addr)",
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "size",
                                    "pointer": []
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "function_suffix": "_float1d",
                        "generic": "(float *addr+dimension(:))"
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "dimension": ":,:",
                                    "intent": "in",
                                    "value": false
                                },
                                "declarator": {
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "attrs": {
                                    "implied": "type(addr)",
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "type",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "implied": "size(addr)",
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "size",
                                    "pointer": []
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "function_suffix": "_float2d",
                        "generic": "(float *addr+dimension(:,:))"
                    }
                ],
                "fstatements": {
                    "c": {
                        "__line__": 63,
                        "c_helper": "ShroudTypeDefines",
                        "pre_call": [
                            "type = convert_type(type);"
                        ]
                    }
                },
                "linenumber": 61,
                "options": {
                    "wrap_fortran": false
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "SavePointer2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "addr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        },
                        {
                            "attrs": {
                                "implied": "type(addr)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "size(addr)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "size",
                                "pointer": []
                            },
                            "specifier": [
                                "size_t"
                            ],
                            "typemap_name": "size_t"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer2(void *addr, int type+implied(type(addr)), size_t size+implied(size(addr)))",
                "declgen": "void SavePointer2(float * addr +dimension(:)+intent(in), int type +implied(type(addr))+intent(in)+value, size_t size +implied(size(addr))+intent(in)+value)",
                "fmtdict": {
                    "F_C_call": "c_save_pointer2",
                    "F_arg_c_call": "C_LOC(addr),\t SH_type,\t SH_size",
                    "F_arguments": "addr",
                    "F_name_function": "save_pointer2_float1d",
                    "F_name_generic": "save_pointer2",
                    "F_name_impl": "save_pointer2_float1d",
                    "F_subprogram": "subroutine",
                    "function_name": "SavePointer2",
                    "function_suffix": "_float1d",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "save_pointer2"
                },
                "fstatements": {
                    "c": {
                        "__line__": 63,
                        "c_helper": "ShroudTypeDefines",
                        "pre_call": [
                            "type = convert_type(type);"
                        ]
                    }
                },
                "linenumber": 61,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "SavePointer2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":,:",
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "addr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        },
                        {
                            "attrs": {
                                "implied": "type(addr)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "size(addr)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "size",
                                "pointer": []
                            },
                            "specifier": [
                                "size_t"
                            ],
                            "typemap_name": "size_t"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer2(void *addr, int type+implied(type(addr)), size_t size+implied(size(addr)))",
                "declgen": "void SavePointer2(float * addr +dimension(:,:)+intent(in), int type +implied(type(addr))+intent(in)+value, size_t size +implied(size(addr))+intent(in)+value)",
                "fmtdict": {
                    "F_C_call": "c_save_pointer2",
                    "F_arg_c_call": "C_LOC(addr),\t SH_type,\t SH_size",
                    "F_arguments": "addr",
                    "F_name_function": "save_pointer2_float2d",
                    "F_name_generic": "save_pointer2",
                    "F_name_impl": "save_pointer2_float2d",
                    "F_subprogram": "subroutine",
                    "function_name": "SavePointer2",
                    "function_suffix": "_float2d",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "save_pointer2"
                },
                "fstatements": {
                    "c": {
                        "__line__": 63,
                        "c_helper": "ShroudTypeDefines",
                        "pre_call": [
                            "type = convert_type(type);"
                        ]
                    }
                },
                "linenumber": 61,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "addr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "addr",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "addr",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_unknown_pointer_out_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "addr",
                            "f_type": "type(C_PTR)",
                            "f_var": "addr",
                            "stmt0": "f_unknown_pointer_out_",
                            "stmt1": "f_default",
                            "stmtc0": "c_unknown_pointer_out_",
                            "stmtc1": "c_default"
                        }
                    },
                    "size": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "size",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "size",
                            "cxx_member": "->",
                            "cxx_type": "size_t",
                            "cxx_var": "size",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "stmt0": "c_native_pointer_out_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "size",
                            "f_type": "integer(C_SIZE_T)",
                            "f_var": "size",
                            "stmt0": "f_native_pointer_out_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_pointer_out_",
                            "stmtc1": "c_default"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "type",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "type",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_pointer_out_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "type",
                            "f_type": "integer(C_INT)",
                            "f_var": "type",
                            "stmt0": "f_native_pointer_out_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_pointer_out_",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "GetPointer",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "addr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "size",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "size_t"
                            ],
                            "typemap_name": "size_t"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetPointer(void **addr+intent(out), int *type+intent(out), size_t *size+intent(out))",
                "declgen": "void GetPointer(void * * addr +intent(out), int * type +intent(out), size_t * size +intent(out))",
                "fmtdict": {
                    "C_call_list": "addr,\t type,\t size",
                    "C_name": "GetPointer",
                    "C_prototype": "void * * addr,\t int * type,\t size_t * size",
                    "C_return_type": "void",
                    "F_C_call": "c_get_pointer",
                    "F_C_name": "get_pointer",
                    "F_arg_c_call": "addr,\t type,\t size",
                    "F_arguments": "addr,\t type,\t size",
                    "F_name_function": "get_pointer",
                    "F_name_generic": "get_pointer",
                    "F_name_impl": "get_pointer",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "GetPointer",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "get_pointer"
                },
                "linenumber": 77,
                "options": {}
            },
            {
                "_fmtargs": {
                    "addr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "addr",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "addr",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_unknown_pointer_out_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "addr",
                            "f_type": "real(C_FLOAT)",
                            "f_var": "addr",
                            "stmt0": "f_unknown_pointer_out_",
                            "stmt1": "f_default",
                            "stmtc0": "c_unknown_pointer_out_",
                            "stmtc1": "c_default"
                        }
                    },
                    "size": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "size",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "size",
                            "cxx_member": "->",
                            "cxx_type": "size_t",
                            "cxx_var": "size",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "stmt0": "c_native_pointer_out_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "size",
                            "f_type": "integer(C_SIZE_T)",
                            "f_var": "size",
                            "stmt0": "f_native_pointer_out_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_pointer_out_",
                            "stmtc1": "c_default"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "type",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "type",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_pointer_out_",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "c_var": "type",
                            "f_type": "integer(C_INT)",
                            "f_var": "type",
                            "stmt0": "f_native_pointer_out_",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_pointer_out_",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GetPointerAsPointer",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "addr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "hidden": true,
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "hidden": true,
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "size",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "size_t"
                            ],
                            "typemap_name": "size_t"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetPointerAsPointer( void **addr+intent(out), int *type+intent(out)+hidden, size_t *size+intent(out)+hidden)",
                "declgen": "void GetPointerAsPointer(void * * addr +intent(out), int * type +hidden+intent(out), size_t * size +hidden+intent(out))",
                "fmtdict": {
                    "C_call_list": "addr,\t type,\t size",
                    "C_name": "GetPointerAsPointer",
                    "C_prototype": "void * * addr,\t int * type,\t size_t * size",
                    "C_return_type": "void",
                    "F_C_name": "c_get_pointer_as_pointer",
                    "c_const": "",
                    "function_name": "GetPointerAsPointer",
                    "underscore_name": "get_pointer_as_pointer"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "deref": "pointer",
                                    "dimension": ":",
                                    "intent": "out",
                                    "value": false
                                },
                                "declarator": {
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "attrs": {
                                    "hidden": true,
                                    "intent": "out",
                                    "value": false
                                },
                                "declarator": {
                                    "name": "type",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "hidden": true,
                                    "intent": "out",
                                    "value": false
                                },
                                "declarator": {
                                    "name": "size",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "function_suffix": "_float1d",
                        "generic": "(float **addr+intent(out)+dimension(:)+deref(pointer))"
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "deref": "pointer",
                                    "dimension": ":,:",
                                    "intent": "out",
                                    "value": false
                                },
                                "declarator": {
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "attrs": {
                                    "hidden": true,
                                    "intent": "out",
                                    "value": false
                                },
                                "declarator": {
                                    "name": "type",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "hidden": true,
                                    "intent": "out",
                                    "value": false
                                },
                                "declarator": {
                                    "name": "size",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "function_suffix": "_float2d",
                        "generic": "(float **addr+intent(out)+dimension(:,:)+deref(pointer))"
                    }
                ],
                "linenumber": 80,
                "options": {
                    "wrap_fortran": false
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GetPointerAsPointer",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "deref": "pointer",
                                "dimension": ":",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "addr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        },
                        {
                            "attrs": {
                                "hidden": true,
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "hidden": true,
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "size",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "size_t"
                            ],
                            "typemap_name": "size_t"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetPointerAsPointer( void **addr+intent(out), int *type+intent(out)+hidden, size_t *size+intent(out)+hidden)",
                "declgen": "void GetPointerAsPointer(float * * addr +deref(pointer)+dimension(:)+intent(out), int * type +hidden+intent(out), size_t * size +hidden+intent(out))",
                "fmtdict": {
                    "F_C_call": "c_get_pointer_as_pointer",
                    "F_arg_c_call": "C_LOC(addr),\t type,\t size",
                    "F_arguments": "addr",
                    "F_name_function": "get_pointer_as_pointer_float1d",
                    "F_name_generic": "get_pointer_as_pointer",
                    "F_name_impl": "get_pointer_as_pointer_float1d",
                    "F_subprogram": "subroutine",
                    "function_name": "GetPointerAsPointer",
                    "function_suffix": "_float1d",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "get_pointer_as_pointer"
                },
                "linenumber": 80,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GetPointerAsPointer",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "deref": "pointer",
                                "dimension": ":,:",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "addr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        },
                        {
                            "attrs": {
                                "hidden": true,
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "hidden": true,
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "size",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "size_t"
                            ],
                            "typemap_name": "size_t"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetPointerAsPointer( void **addr+intent(out), int *type+intent(out)+hidden, size_t *size+intent(out)+hidden)",
                "declgen": "void GetPointerAsPointer(float * * addr +deref(pointer)+dimension(:,:)+intent(out), int * type +hidden+intent(out), size_t * size +hidden+intent(out))",
                "fmtdict": {
                    "F_C_call": "c_get_pointer_as_pointer",
                    "F_arg_c_call": "C_LOC(addr),\t type,\t size",
                    "F_arguments": "addr",
                    "F_name_function": "get_pointer_as_pointer_float2d",
                    "F_name_generic": "get_pointer_as_pointer",
                    "F_name_impl": "get_pointer_as_pointer_float2d",
                    "F_subprogram": "subroutine",
                    "function_name": "GetPointerAsPointer",
                    "function_suffix": "_float2d",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "get_pointer_as_pointer"
                },
                "linenumber": 80,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            }
        ],
        "language": "c",
        "options": {
            "C_API_case": "native",
            "C_enum_member_template": "{C_prefix}{C_name_scope}{enum_member_name}",
            "C_enum_template": "{C_prefix}{C_name_scope}{enum_name}",
            "C_header_filename_class_template": "wrap{file_scope}.{C_header_filename_suffix}",
            "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}",
            "C_header_filename_namespace_template": "wrap{file_scope}.{C_header_filename_suffix}",
            "C_header_utility_template": "types{library}.{C_header_filename_suffix}",
            "C_impl_filename_class_template": "wrap{file_scope}.{C_impl_filename_suffix}",
            "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}",
            "C_impl_filename_namespace_template": "wrap{file_scope}.{C_impl_filename_suffix}",
            "C_line_length": 72,
            "C_memory_dtor_function_template": "{C_prefix}SHROUD_memory_destructor",
            "C_name_template": "{C_prefix}{C_name_scope}{underscore_name}{function_suffix}{template_suffix}",
            "C_var_capsule_template": "C{c_var}",
            "C_var_context_template": "D{c_var}",
            "C_var_len_template": "N{c_var}",
            "C_var_size_template": "S{c_var}",
            "C_var_trim_template": "L{c_var}",
            "F_C_name_template": "{F_C_prefix}{F_name_scope}{underscore_name}{function_suffix}{template_suffix}",
            "F_abstract_interface_argument_template": "arg{index}",
            "F_abstract_interface_subprogram_template": "{underscore_name}_{argname}",
            "F_auto_reference_count": false,
            "F_capsule_data_type_class_template": "SHROUD_{F_name_scope}capsule",
            "F_create_bufferify_function": true,
            "F_create_generic": true,
            "F_enum_member_template": "{F_name_scope}{enum_member_lower}",
            "F_flatten_namespace": false,
            "F_force_wrapper": false,
            "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}",
            "F_impl_filename_namespace_template": "wrapf{file_scope}.{F_filename_suffix}",
            "F_line_length": 72,
            "F_module_name_library_template": "{library_lower}_mod",
            "F_module_name_namespace_template": "{file_scope}_mod",
            "F_name_function_template": "{underscore_name}{function_suffix}{template_suffix}",
            "F_name_generic_template": "{underscore_name}",
            "F_name_impl_template": "{F_name_scope}{underscore_name}{function_suffix}{template_suffix}",
            "F_return_fortran_pointer": true,
            "F_standard": 2003,
            "F_string_len_trim": true,
            "LUA_class_reg_template": "{LUA_prefix}{cxx_class}_Reg",
            "LUA_ctor_name_template": "{cxx_class}",
            "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}",
            "LUA_metadata_template": "{cxx_class}.metatable",
            "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}",
            "LUA_module_name_template": "{library_lower}",
            "LUA_module_reg_template": "{LUA_prefix}{library}_Reg",
            "LUA_name_impl_template": "{LUA_prefix}{C_name_scope}{underscore_name}",
            "LUA_name_template": "{function_name}",
            "LUA_userdata_member_template": "self",
            "LUA_userdata_type_template": "{LUA_prefix}{cxx_class}_Type",
            "PY_PyObject_template": "{PY_prefix}{cxx_class}",
            "PY_PyTypeObject_template": "{PY_prefix}{cxx_class}_Type",
            "PY_array_arg": "numpy",
            "PY_capsule_destructor_function_template": "{PY_prefix}SHROUD_capsule_destructor",
            "PY_dtor_context_array_template": "{PY_prefix}SHROUD_capsule_context",
            "PY_dtor_context_typedef_template": "{PY_prefix}SHROUD_dtor_context",
            "PY_fetch_context_function_template": "{PY_prefix}SHROUD_fetch_context",
            "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}",
            "PY_member_getter_template": "{PY_prefix}{cxx_class}_{variable_name}_getter",
            "PY_member_setter_template": "{PY_prefix}{cxx_class}_{variable_name}_setter",
            "PY_module_filename_template": "py{file_scope}module.{PY_impl_filename_suffix}",
            "PY_name_impl_template": "{PY_prefix}{function_name}{function_suffix}{template_suffix}",
            "PY_numpy_array_capsule_name_template": "{PY_prefix}array_dtor",
            "PY_release_memory_function_template": "{PY_prefix}SHROUD_release_memory",
            "PY_struct_arg": "numpy",
            "PY_struct_array_descr_create_template": "{PY_prefix}{cxx_class}_create_array_descr",
            "PY_struct_array_descr_name_template": "{cxx_class}_dtype",
            "PY_struct_array_descr_variable_template": "{PY_prefix}{cxx_class}_array_descr",
            "PY_type_filename_template": "py{file_scope}type.{PY_impl_filename_suffix}",
            "PY_type_impl_template": "{PY_prefix}{cxx_class}_{PY_type_method}{function_suffix}{template_suffix}",
            "PY_utility_filename_template": "py{library}util.{PY_impl_filename_suffix}",
            "YAML_type_filename_template": "{library_lower}_types.yaml",
            "__line__": 15,
            "debug": true,
            "debug_index": false,
            "doxygen": true,
            "flatten_namespace": false,
            "literalinclude": false,
            "literalinclude2": true,
            "return_scalar_pointer": "pointer",
            "show_splicer_comments": true,
            "wrap_c": true,
            "wrap_fortran": true,
            "wrap_lua": false,
            "wrap_python": false
        },
        "scope_file": [
            "generic"
        ]
    }
}